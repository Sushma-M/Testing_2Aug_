/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.FormTable;
import com.testing26thjuly_.db123testing.service.FormTableService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class FormTable.
 * @see FormTable
 */
@RestController("DB123Testing.FormTableController")
@RequestMapping("/DB123Testing/FormTable")
@Api(description = "Exposes APIs to work with FormTable resource.", value = "FormTableController")
public class FormTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormTableController.class);

    @Autowired
    @Qualifier("DB123Testing.FormTableService")
    private FormTableService formTableService;

    /**
     * @deprecated Use {@link #findFormTables(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of FormTable instances matching the search criteria.")
    public Page<FormTable> findFormTables(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FormTables list");
        return formTableService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of FormTable instances matching the search criteria.")
    public Page<FormTable> findFormTables(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FormTables list");
        return formTableService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportFormTables(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return formTableService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormTableService instance
	 */
    protected void setFormTableService(FormTableService service) {
        this.formTableService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new FormTable instance.")
    public FormTable createFormTable(@RequestBody FormTable formtable) {
        LOGGER.debug("Create FormTable with information: {}", formtable);
        formtable = formTableService.create(formtable);
        LOGGER.debug("Created FormTable with information: {}", formtable);
        return formtable;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of FormTable instances.")
    public Long countFormTables(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting FormTables");
        return formTableService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the FormTable instance associated with the given id.")
    public FormTable getFormTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FormTable with id: {}", id);
        FormTable foundFormTable = formTableService.getById(id);
        LOGGER.debug("FormTable details with id: {}", foundFormTable);
        return foundFormTable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the FormTable instance associated with the given id.")
    public FormTable editFormTable(@PathVariable(value = "id") Integer id, @RequestBody FormTable formtable) throws EntityNotFoundException {
        LOGGER.debug("Editing FormTable with id: {}", formtable.getId());
        formtable.setId(id);
        formtable = formTableService.update(formtable);
        LOGGER.debug("FormTable details with id: {}", formtable);
        return formtable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the FormTable instance associated with the given id.")
    public boolean deleteFormTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormTable with id: {}", id);
        FormTable deletedFormTable = formTableService.delete(id);
        return deletedFormTable != null;
    }
}
