/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.TestTablename;
import com.testing26thjuly_.db123testing.service.TestTablenameService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TestTablename.
 * @see TestTablename
 */
@RestController("DB123Testing.TestTablenameController")
@RequestMapping("/DB123Testing/TestTablename")
@Api(description = "Exposes APIs to work with TestTablename resource.", value = "TestTablenameController")
public class TestTablenameController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestTablenameController.class);

    @Autowired
    @Qualifier("DB123Testing.TestTablenameService")
    private TestTablenameService testTablenameService;

    /**
     * @deprecated Use {@link #findTestTablenames(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TestTablename instances matching the search criteria.")
    public Page<TestTablename> findTestTablenames(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestTablenames list");
        return testTablenameService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TestTablename instances matching the search criteria.")
    public Page<TestTablename> findTestTablenames(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestTablenames list");
        return testTablenameService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTestTablenames(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return testTablenameService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestTablenameService instance
	 */
    protected void setTestTablenameService(TestTablenameService service) {
        this.testTablenameService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TestTablename instance.")
    public TestTablename createTestTablename(@RequestBody TestTablename testtablename) {
        LOGGER.debug("Create TestTablename with information: {}", testtablename);
        testtablename = testTablenameService.create(testtablename);
        LOGGER.debug("Created TestTablename with information: {}", testtablename);
        return testtablename;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TestTablename instances.")
    public Long countTestTablenames(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TestTablenames");
        return testTablenameService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TestTablename instance associated with the given id.")
    public TestTablename getTestTablename(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestTablename with id: {}", id);
        TestTablename foundTestTablename = testTablenameService.getById(id);
        LOGGER.debug("TestTablename details with id: {}", foundTestTablename);
        return foundTestTablename;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TestTablename instance associated with the given id.")
    public TestTablename editTestTablename(@PathVariable(value = "id") Integer id, @RequestBody TestTablename testtablename) throws EntityNotFoundException {
        LOGGER.debug("Editing TestTablename with id: {}", testtablename.getId());
        testtablename.setId(id);
        testtablename = testTablenameService.update(testtablename);
        LOGGER.debug("TestTablename details with id: {}", testtablename);
        return testtablename;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TestTablename instance associated with the given id.")
    public boolean deleteTestTablename(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestTablename with id: {}", id);
        TestTablename deletedTestTablename = testTablenameService.delete(id);
        return deletedTestTablename != null;
    }
}
