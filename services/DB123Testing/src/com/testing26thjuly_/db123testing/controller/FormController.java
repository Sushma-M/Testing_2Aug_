/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Form;
import com.testing26thjuly_.db123testing.service.FormService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Form.
 * @see Form
 */
@RestController("DB123Testing.FormController")
@RequestMapping("/DB123Testing/Form")
@Api(description = "Exposes APIs to work with Form resource.", value = "FormController")
public class FormController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormController.class);

    @Autowired
    @Qualifier("DB123Testing.FormService")
    private FormService formService;

    /**
     * @deprecated Use {@link #findForms(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Form instances matching the search criteria.")
    public Page<Form> findForms(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Forms list");
        return formService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Form instances matching the search criteria.")
    public Page<Form> findForms(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Forms list");
        return formService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportForms(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return formService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormService instance
	 */
    protected void setFormService(FormService service) {
        this.formService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Form instance.")
    public Form createForm(@RequestBody Form form) {
        LOGGER.debug("Create Form with information: {}", form);
        form = formService.create(form);
        LOGGER.debug("Created Form with information: {}", form);
        return form;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Form instances.")
    public Long countForms(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Forms");
        return formService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Form instance associated with the given id.")
    public Form getForm(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Form with id: {}", id);
        Form foundForm = formService.getById(id);
        LOGGER.debug("Form details with id: {}", foundForm);
        return foundForm;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Form instance associated with the given id.")
    public Form editForm(@PathVariable(value = "id") String id, @RequestBody Form form) throws EntityNotFoundException {
        LOGGER.debug("Editing Form with id: {}", form.getId());
        form.setId(id);
        form = formService.update(form);
        LOGGER.debug("Form details with id: {}", form);
        return form;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Form instance associated with the given id.")
    public boolean deleteForm(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Form with id: {}", id);
        Form deletedForm = formService.delete(id);
        return deletedForm != null;
    }
}
