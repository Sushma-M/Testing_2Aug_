/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.AllTypes;
import com.testing26thjuly_.db123testing.service.AllTypesService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AllTypes.
 * @see AllTypes
 */
@RestController("DB123Testing.AllTypesController")
@RequestMapping("/DB123Testing/AllTypes")
@Api(description = "Exposes APIs to work with AllTypes resource.", value = "AllTypesController")
public class AllTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesController.class);

    @Autowired
    @Qualifier("DB123Testing.AllTypesService")
    private AllTypesService allTypesService;

    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Retrieves content for the given BLOB field in AllTypes instance")
    public DownloadResponse getAllTypesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value = "download", defaultValue = "false") boolean download) {
        LOGGER.debug("Retrieves content for the given BLOB field {} in AllTypes instance", fieldName);
        if (!WMRuntimeUtils.isLob(AllTypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        AllTypes alltypes = allTypesService.getById(id);
        return WMMultipartUtils.buildDownloadResponseForBlob(alltypes, fieldName, httpServletRequest, download);
    }

    /**
     * @deprecated Use {@link #findAllTypes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AllTypes instances matching the search criteria.")
    public Page<AllTypes> findAllTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllTypes list");
        return allTypesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AllTypes instances matching the search criteria.")
    public Page<AllTypes> findAllTypes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypes list");
        return allTypesService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAllTypes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return allTypesService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllTypesService instance
	 */
    protected void setAllTypesService(AllTypesService service) {
        this.allTypesService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AllTypes instance.")
    public AllTypes createAllTypes(@RequestBody AllTypes alltypes) {
        LOGGER.debug("Create AllTypes with information: {}", alltypes);
        alltypes = allTypesService.create(alltypes);
        LOGGER.debug("Created AllTypes with information: {}", alltypes);
        return alltypes;
    }

    @RequestMapping(method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AllTypes instance.")
    public AllTypes createAllTypes(MultipartHttpServletRequest multipartHttpServletRequest) {
        AllTypes alltypes = WMMultipartUtils.toObject(multipartHttpServletRequest, AllTypes.class, "DB123Testing");
        LOGGER.debug("Creating a new AllTypes with information: {}", alltypes);
        return allTypesService.create(alltypes);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AllTypes instances.")
    public Long countAllTypes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AllTypes");
        return allTypesService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AllTypes instance associated with the given id.")
    public AllTypes getAllTypes(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AllTypes with id: {}", id);
        AllTypes foundAllTypes = allTypesService.getById(id);
        LOGGER.debug("AllTypes details with id: {}", foundAllTypes);
        return foundAllTypes;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AllTypes instance associated with the given id.")
    public AllTypes editAllTypes(@PathVariable(value = "id") Integer id, @RequestBody AllTypes alltypes) throws EntityNotFoundException {
        LOGGER.debug("Editing AllTypes with id: {}", alltypes.getId());
        alltypes.setId(id);
        alltypes = allTypesService.update(alltypes);
        LOGGER.debug("AllTypes details with id: {}", alltypes);
        return alltypes;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AllTypes instance associated with the given id.This API should be used when AllTypes instance fields that require multipart data.")
    public AllTypes editAllTypes(@PathVariable(value = "id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        AllTypes newAllTypes = WMMultipartUtils.toObject(multipartHttpServletRequest, AllTypes.class, "DB123Testing");
        newAllTypes.setId(id);
        AllTypes oldAllTypes = allTypesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAllTypes, newAllTypes);
        LOGGER.debug("Updating AllTypes with information: {}", newAllTypes);
        return allTypesService.update(newAllTypes);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AllTypes instance associated with the given id.")
    public boolean deleteAllTypes(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AllTypes with id: {}", id);
        AllTypes deletedAllTypes = allTypesService.delete(id);
        return deletedAllTypes != null;
    }
}
