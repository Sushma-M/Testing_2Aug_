/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Urtable2;
import com.testing26thjuly_.db123testing.service.Urtable2Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Urtable2.
 * @see Urtable2
 */
@RestController("DB123Testing.Urtable2Controller")
@RequestMapping("/DB123Testing/Urtable2")
@Api(description = "Exposes APIs to work with Urtable2 resource.", value = "Urtable2Controller")
public class Urtable2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Urtable2Controller.class);

    @Autowired
    @Qualifier("DB123Testing.Urtable2Service")
    private Urtable2Service urtable2Service;

    /**
     * @deprecated Use {@link #findUrtable2s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Urtable2 instances matching the search criteria.")
    public Page<Urtable2> findUrtable2s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Urtable2s list");
        return urtable2Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Urtable2 instances matching the search criteria.")
    public Page<Urtable2> findUrtable2s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Urtable2s list");
        return urtable2Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUrtable2s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return urtable2Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Urtable2Service instance
	 */
    protected void setUrtable2Service(Urtable2Service service) {
        this.urtable2Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Urtable2 instance.")
    public Urtable2 createUrtable2(@RequestBody Urtable2 urtable2) {
        LOGGER.debug("Create Urtable2 with information: {}", urtable2);
        urtable2 = urtable2Service.create(urtable2);
        LOGGER.debug("Created Urtable2 with information: {}", urtable2);
        return urtable2;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Urtable2 instances.")
    public Long countUrtable2s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Urtable2s");
        return urtable2Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Urtable2 instance associated with the given id.")
    public Urtable2 getUrtable2(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Urtable2 with id: {}", id);
        Urtable2 foundUrtable2 = urtable2Service.getById(id);
        LOGGER.debug("Urtable2 details with id: {}", foundUrtable2);
        return foundUrtable2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Urtable2 instance associated with the given id.")
    public Urtable2 editUrtable2(@PathVariable(value = "id") String id, @RequestBody Urtable2 urtable2) throws EntityNotFoundException {
        LOGGER.debug("Editing Urtable2 with id: {}", urtable2.getId());
        urtable2.setId(id);
        urtable2 = urtable2Service.update(urtable2);
        LOGGER.debug("Urtable2 details with id: {}", urtable2);
        return urtable2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Urtable2 instance associated with the given id.")
    public boolean deleteUrtable2(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Urtable2 with id: {}", id);
        Urtable2 deletedUrtable2 = urtable2Service.delete(id);
        return deletedUrtable2 != null;
    }
}
