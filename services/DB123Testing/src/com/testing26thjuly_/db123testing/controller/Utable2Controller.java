/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Utable2;
import com.testing26thjuly_.db123testing.service.Utable2Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Utable2.
 * @see Utable2
 */
@RestController("DB123Testing.Utable2Controller")
@RequestMapping("/DB123Testing/Utable2")
@Api(description = "Exposes APIs to work with Utable2 resource.", value = "Utable2Controller")
public class Utable2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Utable2Controller.class);

    @Autowired
    @Qualifier("DB123Testing.Utable2Service")
    private Utable2Service utable2Service;

    /**
     * @deprecated Use {@link #findUtable2s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Utable2 instances matching the search criteria.")
    public Page<Utable2> findUtable2s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Utable2s list");
        return utable2Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Utable2 instances matching the search criteria.")
    public Page<Utable2> findUtable2s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Utable2s list");
        return utable2Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUtable2s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return utable2Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Utable2Service instance
	 */
    protected void setUtable2Service(Utable2Service service) {
        this.utable2Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Utable2 instance.")
    public Utable2 createUtable2(@RequestBody Utable2 utable2) {
        LOGGER.debug("Create Utable2 with information: {}", utable2);
        utable2 = utable2Service.create(utable2);
        LOGGER.debug("Created Utable2 with information: {}", utable2);
        return utable2;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Utable2 instances.")
    public Long countUtable2s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Utable2s");
        return utable2Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Utable2 instance associated with the given id.")
    public Utable2 getUtable2(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Utable2 with id: {}", id);
        Utable2 foundUtable2 = utable2Service.getById(id);
        LOGGER.debug("Utable2 details with id: {}", foundUtable2);
        return foundUtable2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Utable2 instance associated with the given id.")
    public Utable2 editUtable2(@PathVariable(value = "id") String id, @RequestBody Utable2 utable2) throws EntityNotFoundException {
        LOGGER.debug("Editing Utable2 with id: {}", utable2.getId());
        utable2.setId(id);
        utable2 = utable2Service.update(utable2);
        LOGGER.debug("Utable2 details with id: {}", utable2);
        return utable2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Utable2 instance associated with the given id.")
    public boolean deleteUtable2(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Utable2 with id: {}", id);
        Utable2 deletedUtable2 = utable2Service.delete(id);
        return deletedUtable2 != null;
    }
}
