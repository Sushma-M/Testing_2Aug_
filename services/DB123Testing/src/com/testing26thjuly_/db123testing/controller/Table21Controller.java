/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Table21;
import com.testing26thjuly_.db123testing.service.Table21Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table21.
 * @see Table21
 */
@RestController("DB123Testing.Table21Controller")
@RequestMapping("/DB123Testing/Table21")
@Api(description = "Exposes APIs to work with Table21 resource.", value = "Table21Controller")
public class Table21Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table21Controller.class);

    @Autowired
    @Qualifier("DB123Testing.Table21Service")
    private Table21Service table21Service;

    /**
     * @deprecated Use {@link #findTable21s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table21 instances matching the search criteria.")
    public Page<Table21> findTable21s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table21s list");
        return table21Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table21 instances matching the search criteria.")
    public Page<Table21> findTable21s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table21s list");
        return table21Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable21s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table21Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table21Service instance
	 */
    protected void setTable21Service(Table21Service service) {
        this.table21Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table21 instance.")
    public Table21 createTable21(@RequestBody Table21 table21) {
        LOGGER.debug("Create Table21 with information: {}", table21);
        table21 = table21Service.create(table21);
        LOGGER.debug("Created Table21 with information: {}", table21);
        return table21;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table21 instances.")
    public Long countTable21s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table21s");
        return table21Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table21 instance associated with the given id.")
    public Table21 getTable21(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table21 with id: {}", id);
        Table21 foundTable21 = table21Service.getById(id);
        LOGGER.debug("Table21 details with id: {}", foundTable21);
        return foundTable21;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table21 instance associated with the given id.")
    public Table21 editTable21(@PathVariable(value = "id") String id, @RequestBody Table21 table21) throws EntityNotFoundException {
        LOGGER.debug("Editing Table21 with id: {}", table21.getId());
        table21.setId(id);
        table21 = table21Service.update(table21);
        LOGGER.debug("Table21 details with id: {}", table21);
        return table21;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table21 instance associated with the given id.")
    public boolean deleteTable21(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table21 with id: {}", id);
        Table21 deletedTable21 = table21Service.delete(id);
        return deletedTable21 != null;
    }
}
