/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Utable;
import com.testing26thjuly_.db123testing.service.UtableService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Utable.
 * @see Utable
 */
@RestController("DB123Testing.UtableController")
@RequestMapping("/DB123Testing/Utable")
@Api(description = "Exposes APIs to work with Utable resource.", value = "UtableController")
public class UtableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UtableController.class);

    @Autowired
    @Qualifier("DB123Testing.UtableService")
    private UtableService utableService;

    /**
     * @deprecated Use {@link #findUtables(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Utable instances matching the search criteria.")
    public Page<Utable> findUtables(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Utables list");
        return utableService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Utable instances matching the search criteria.")
    public Page<Utable> findUtables(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Utables list");
        return utableService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUtables(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return utableService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UtableService instance
	 */
    protected void setUtableService(UtableService service) {
        this.utableService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Utable instance.")
    public Utable createUtable(@RequestBody Utable utable) {
        LOGGER.debug("Create Utable with information: {}", utable);
        utable = utableService.create(utable);
        LOGGER.debug("Created Utable with information: {}", utable);
        return utable;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Utable instances.")
    public Long countUtables(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Utables");
        return utableService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Utable instance associated with the given id.")
    public Utable getUtable(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Utable with id: {}", id);
        Utable foundUtable = utableService.getById(id);
        LOGGER.debug("Utable details with id: {}", foundUtable);
        return foundUtable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Utable instance associated with the given id.")
    public Utable editUtable(@PathVariable(value = "id") String id, @RequestBody Utable utable) throws EntityNotFoundException {
        LOGGER.debug("Editing Utable with id: {}", utable.getId());
        utable.setId(id);
        utable = utableService.update(utable);
        LOGGER.debug("Utable details with id: {}", utable);
        return utable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Utable instance associated with the given id.")
    public boolean deleteUtable(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Utable with id: {}", id);
        Utable deletedUtable = utableService.delete(id);
        return deletedUtable != null;
    }
}
