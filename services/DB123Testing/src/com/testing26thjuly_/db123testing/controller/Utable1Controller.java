/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Utable1;
import com.testing26thjuly_.db123testing.Utable1Id;
import com.testing26thjuly_.db123testing.service.Utable1Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Utable1.
 * @see Utable1
 */
@RestController("DB123Testing.Utable1Controller")
@RequestMapping("/DB123Testing/Utable1")
@Api(description = "Exposes APIs to work with Utable1 resource.", value = "Utable1Controller")
public class Utable1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Utable1Controller.class);

    @Autowired
    @Qualifier("DB123Testing.Utable1Service")
    private Utable1Service utable1Service;

    /**
     * @deprecated Use {@link #findUtable1s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Utable1 instances matching the search criteria.")
    public Page<Utable1> findUtable1s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Utable1s list");
        return utable1Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Utable1 instances matching the search criteria.")
    public Page<Utable1> findUtable1s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Utable1s list");
        return utable1Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUtable1s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return utable1Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Utable1Service instance
	 */
    protected void setUtable1Service(Utable1Service service) {
        this.utable1Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Utable1 instance.")
    public Utable1 createUtable1(@RequestBody Utable1 utable1) {
        LOGGER.debug("Create Utable1 with information: {}", utable1);
        utable1 = utable1Service.create(utable1);
        LOGGER.debug("Created Utable1 with information: {}", utable1);
        return utable1;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Utable1 instance associated with the given composite-id.")
    public Utable1 getUtable1(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "company", required = true) String company, @RequestParam(value = "contactName", required = true) String contactName, @RequestParam(value = "address", required = true) String address, @RequestParam(value = "city", required = true) String city) throws EntityNotFoundException {
        Utable1Id utable1Id = new Utable1Id();
        utable1Id.setId(id);
        utable1Id.setCompany(company);
        utable1Id.setContactName(contactName);
        utable1Id.setAddress(address);
        utable1Id.setCity(city);
        LOGGER.debug("Getting Utable1 with id: {}", utable1Id);
        Utable1 utable1 = utable1Service.getById(utable1Id);
        LOGGER.debug("Utable1 details with id: {}", utable1);
        return utable1;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Utable1 instance associated with the given composite-id.")
    public Utable1 editUtable1(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "company", required = true) String company, @RequestParam(value = "contactName", required = true) String contactName, @RequestParam(value = "address", required = true) String address, @RequestParam(value = "city", required = true) String city, @RequestBody Utable1 utable1) throws EntityNotFoundException {
        Utable1Id utable1Id = new Utable1Id();
        utable1Id.setId(id);
        utable1Id.setCompany(company);
        utable1Id.setContactName(contactName);
        utable1Id.setAddress(address);
        utable1Id.setCity(city);
        utable1Service.delete(utable1Id);
        utable1 = utable1Service.create(utable1);
        LOGGER.debug("Utable1 details with id is updated: {}", utable1);
        return utable1;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Utable1 instance associated with the given composite-id.")
    public boolean deleteUtable1(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "company", required = true) String company, @RequestParam(value = "contactName", required = true) String contactName, @RequestParam(value = "address", required = true) String address, @RequestParam(value = "city", required = true) String city) throws EntityNotFoundException {
        Utable1Id utable1Id = new Utable1Id();
        utable1Id.setId(id);
        utable1Id.setCompany(company);
        utable1Id.setContactName(contactName);
        utable1Id.setAddress(address);
        utable1Id.setCity(city);
        LOGGER.debug("Deleting Utable1 with id: {}", utable1Id);
        Utable1 utable1 = utable1Service.delete(utable1Id);
        return utable1 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Utable1 instances.")
    public Long countUtable1s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Utable1s");
        return utable1Service.count(query);
    }
}
