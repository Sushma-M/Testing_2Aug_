/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.UsersTable;
import com.testing26thjuly_.db123testing.service.UsersTableService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class UsersTable.
 * @see UsersTable
 */
@RestController("DB123Testing.UsersTableController")
@RequestMapping("/DB123Testing/UsersTable")
@Api(description = "Exposes APIs to work with UsersTable resource.", value = "UsersTableController")
public class UsersTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersTableController.class);

    @Autowired
    @Qualifier("DB123Testing.UsersTableService")
    private UsersTableService usersTableService;

    /**
     * @deprecated Use {@link #findUsersTables(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of UsersTable instances matching the search criteria.")
    public Page<UsersTable> findUsersTables(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UsersTables list");
        return usersTableService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of UsersTable instances matching the search criteria.")
    public Page<UsersTable> findUsersTables(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UsersTables list");
        return usersTableService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUsersTables(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return usersTableService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UsersTableService instance
	 */
    protected void setUsersTableService(UsersTableService service) {
        this.usersTableService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new UsersTable instance.")
    public UsersTable createUsersTable(@RequestBody UsersTable userstable) {
        LOGGER.debug("Create UsersTable with information: {}", userstable);
        userstable = usersTableService.create(userstable);
        LOGGER.debug("Created UsersTable with information: {}", userstable);
        return userstable;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of UsersTable instances.")
    public Long countUsersTables(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting UsersTables");
        return usersTableService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the UsersTable instance associated with the given id.")
    public UsersTable getUsersTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UsersTable with id: {}", id);
        UsersTable foundUsersTable = usersTableService.getById(id);
        LOGGER.debug("UsersTable details with id: {}", foundUsersTable);
        return foundUsersTable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the UsersTable instance associated with the given id.")
    public UsersTable editUsersTable(@PathVariable(value = "id") Integer id, @RequestBody UsersTable userstable) throws EntityNotFoundException {
        LOGGER.debug("Editing UsersTable with id: {}", userstable.getUserId());
        userstable.setUserId(id);
        userstable = usersTableService.update(userstable);
        LOGGER.debug("UsersTable details with id: {}", userstable);
        return userstable;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the UsersTable instance associated with the given id.")
    public boolean deleteUsersTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UsersTable with id: {}", id);
        UsersTable deletedUsersTable = usersTableService.delete(id);
        return deletedUsersTable != null;
    }
}
