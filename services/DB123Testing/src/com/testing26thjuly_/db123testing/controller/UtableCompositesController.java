/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.UtableComposites;
import com.testing26thjuly_.db123testing.UtableCompositesId;
import com.testing26thjuly_.db123testing.service.UtableCompositesService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class UtableComposites.
 * @see UtableComposites
 */
@RestController("DB123Testing.UtableCompositesController")
@RequestMapping("/DB123Testing/UtableComposites")
@Api(description = "Exposes APIs to work with UtableComposites resource.", value = "UtableCompositesController")
public class UtableCompositesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UtableCompositesController.class);

    @Autowired
    @Qualifier("DB123Testing.UtableCompositesService")
    private UtableCompositesService utableCompositesService;

    /**
     * @deprecated Use {@link #findUtableComposites(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of UtableComposites instances matching the search criteria.")
    public Page<UtableComposites> findUtableComposites(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UtableComposites list");
        return utableCompositesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of UtableComposites instances matching the search criteria.")
    public Page<UtableComposites> findUtableComposites(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UtableComposites list");
        return utableCompositesService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUtableComposites(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return utableCompositesService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UtableCompositesService instance
	 */
    protected void setUtableCompositesService(UtableCompositesService service) {
        this.utableCompositesService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new UtableComposites instance.")
    public UtableComposites createUtableComposites(@RequestBody UtableComposites utablecomposites) {
        LOGGER.debug("Create UtableComposites with information: {}", utablecomposites);
        utablecomposites = utableCompositesService.create(utablecomposites);
        LOGGER.debug("Created UtableComposites with information: {}", utablecomposites);
        return utablecomposites;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the UtableComposites instance associated with the given composite-id.")
    public UtableComposites getUtableComposites(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "companyId", required = true) String companyId) throws EntityNotFoundException {
        UtableCompositesId utablecompositesId = new UtableCompositesId();
        utablecompositesId.setId(id);
        utablecompositesId.setCompanyId(companyId);
        LOGGER.debug("Getting UtableComposites with id: {}", utablecompositesId);
        UtableComposites utablecomposites = utableCompositesService.getById(utablecompositesId);
        LOGGER.debug("UtableComposites details with id: {}", utablecomposites);
        return utablecomposites;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the UtableComposites instance associated with the given composite-id.")
    public UtableComposites editUtableComposites(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "companyId", required = true) String companyId, @RequestBody UtableComposites utablecomposites) throws EntityNotFoundException {
        UtableCompositesId utablecompositesId = new UtableCompositesId();
        utablecompositesId.setId(id);
        utablecompositesId.setCompanyId(companyId);
        utableCompositesService.delete(utablecompositesId);
        utablecomposites = utableCompositesService.create(utablecomposites);
        LOGGER.debug("UtableComposites details with id is updated: {}", utablecomposites);
        return utablecomposites;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the UtableComposites instance associated with the given composite-id.")
    public boolean deleteUtableComposites(@RequestParam(value = "id", required = true) String id, @RequestParam(value = "companyId", required = true) String companyId) throws EntityNotFoundException {
        UtableCompositesId utablecompositesId = new UtableCompositesId();
        utablecompositesId.setId(id);
        utablecompositesId.setCompanyId(companyId);
        LOGGER.debug("Deleting UtableComposites with id: {}", utablecompositesId);
        UtableComposites utablecomposites = utableCompositesService.delete(utablecompositesId);
        return utablecomposites != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of UtableComposites instances.")
    public Long countUtableComposites(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting UtableComposites");
        return utableCompositesService.count(query);
    }
}
