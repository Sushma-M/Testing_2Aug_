/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.db123testing.Urtable1;
import com.testing26thjuly_.db123testing.service.Urtable1Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Urtable1.
 * @see Urtable1
 */
@RestController("DB123Testing.Urtable1Controller")
@RequestMapping("/DB123Testing/Urtable1")
@Api(description = "Exposes APIs to work with Urtable1 resource.", value = "Urtable1Controller")
public class Urtable1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Urtable1Controller.class);

    @Autowired
    @Qualifier("DB123Testing.Urtable1Service")
    private Urtable1Service urtable1Service;

    /**
     * @deprecated Use {@link #findUrtable1s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Urtable1 instances matching the search criteria.")
    public Page<Urtable1> findUrtable1s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Urtable1s list");
        return urtable1Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Urtable1 instances matching the search criteria.")
    public Page<Urtable1> findUrtable1s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Urtable1s list");
        return urtable1Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportUrtable1s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return urtable1Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Urtable1Service instance
	 */
    protected void setUrtable1Service(Urtable1Service service) {
        this.urtable1Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Urtable1 instance.")
    public Urtable1 createUrtable1(@RequestBody Urtable1 urtable1) {
        LOGGER.debug("Create Urtable1 with information: {}", urtable1);
        urtable1 = urtable1Service.create(urtable1);
        LOGGER.debug("Created Urtable1 with information: {}", urtable1);
        return urtable1;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Urtable1 instances.")
    public Long countUrtable1s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Urtable1s");
        return urtable1Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Urtable1 instance associated with the given id.")
    public Urtable1 getUrtable1(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Urtable1 with id: {}", id);
        Urtable1 foundUrtable1 = urtable1Service.getById(id);
        LOGGER.debug("Urtable1 details with id: {}", foundUrtable1);
        return foundUrtable1;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Urtable1 instance associated with the given id.")
    public Urtable1 editUrtable1(@PathVariable(value = "id") String id, @RequestBody Urtable1 urtable1) throws EntityNotFoundException {
        LOGGER.debug("Editing Urtable1 with id: {}", urtable1.getId());
        urtable1.setId(id);
        urtable1 = urtable1Service.update(urtable1);
        LOGGER.debug("Urtable1 details with id: {}", urtable1);
        return urtable1;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Urtable1 instance associated with the given id.")
    public boolean deleteUrtable1(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Urtable1 with id: {}", id);
        Urtable1 deletedUrtable1 = urtable1Service.delete(id);
        return deletedUrtable1 != null;
    }
}
