/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Table21;

/**
 * ServiceImpl object for domain model class Table21.
 *
 * @see Table21
 */
@Service("DB123Testing.Table21Service")
public class Table21ServiceImpl implements Table21Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table21ServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.Table21Dao")
    private WMGenericDao<Table21, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table21, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public Table21 create(Table21 table21) {
        LOGGER.debug("Creating a new Table21 with information: {}", table21);
        return this.wmGenericDao.create(table21);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Table21 getById(String table21Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table21 by id: {}", table21Id);
        Table21 table21 = this.wmGenericDao.findById(table21Id);
        if (table21 == null){
            LOGGER.debug("No Table21 found with id: {}", table21Id);
            throw new EntityNotFoundException(String.valueOf(table21Id));
        }
        return table21;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public Table21 update(Table21 table21) throws EntityNotFoundException {
        LOGGER.debug("Updating Table21 with information: {}", table21);
        this.wmGenericDao.update(table21);

        String table21Id = table21.getId();

        return this.wmGenericDao.findById(table21Id);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public Table21 delete(String table21Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table21 with id: {}", table21Id);
        Table21 deleted = this.wmGenericDao.findById(table21Id);
        if (deleted == null) {
            LOGGER.debug("No Table21 found with id: {}", table21Id);
            throw new EntityNotFoundException(String.valueOf(table21Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<Table21> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table21s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Table21> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table21s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table Table21 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table21> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

