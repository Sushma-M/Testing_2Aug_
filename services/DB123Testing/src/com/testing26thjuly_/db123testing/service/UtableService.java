/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Utable;

/**
 * Service object for domain model class Utable.
 *
 * @see {@link Utable}
 */
public interface UtableService {

    /**
     * Creates a new Utable.
     *
     * @param utable The information of the created CompositeTable.
     * @return The created Utable.
     */
	Utable create(Utable utable);


	/**
	 * Finds Utable by id.
	 *
	 * @param utableId The id of the wanted Utable.
	 * @return The found Utable. If no Utable is found, this method returns null.
	 */
	Utable getById(String utableId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Utable.
	 *
	 * @param utable The information of the updated Utable.
	 * @return The updated Utable.
     *
	 * @throws EntityNotFoundException if no Utable is found with given id.
	 */
	Utable update(Utable utable) throws EntityNotFoundException;

    /**
	 * Deletes a Utable.
	 *
	 * @param utableId The id of the deleted Utable.
	 * @return The deleted Utable.
     *
	 * @throws EntityNotFoundException if no Utable is found with the given id.
	 */
	Utable delete(String utableId) throws EntityNotFoundException;

	/**
	 * Finds all Utables.
	 *
	 * @return A list of Utables.
	 */
    @Deprecated
	Page<Utable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Utables.
	 * @return A list of Utables.
	 */
    Page<Utable> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Utables in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Utable.
	 */
	long count(String query);

    Page<Utable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

