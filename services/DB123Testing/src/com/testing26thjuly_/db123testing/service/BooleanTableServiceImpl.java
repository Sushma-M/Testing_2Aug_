/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.BooleanTable;

/**
 * ServiceImpl object for domain model class BooleanTable.
 *
 * @see BooleanTable
 */
@Service("DB123Testing.BooleanTableService")
public class BooleanTableServiceImpl implements BooleanTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BooleanTableServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.BooleanTableDao")
    private WMGenericDao<BooleanTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BooleanTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public BooleanTable create(BooleanTable booleantable) {
        LOGGER.debug("Creating a new BooleanTable with information: {}", booleantable);
        return this.wmGenericDao.create(booleantable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public BooleanTable getById(Integer booleantableId) throws EntityNotFoundException {
        LOGGER.debug("Finding BooleanTable by id: {}", booleantableId);
        BooleanTable booleantable = this.wmGenericDao.findById(booleantableId);
        if (booleantable == null){
            LOGGER.debug("No BooleanTable found with id: {}", booleantableId);
            throw new EntityNotFoundException(String.valueOf(booleantableId));
        }
        return booleantable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public BooleanTable update(BooleanTable booleantable) throws EntityNotFoundException {
        LOGGER.debug("Updating BooleanTable with information: {}", booleantable);
        this.wmGenericDao.update(booleantable);

        Integer booleantableId = booleantable.getId();

        return this.wmGenericDao.findById(booleantableId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public BooleanTable delete(Integer booleantableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BooleanTable with id: {}", booleantableId);
        BooleanTable deleted = this.wmGenericDao.findById(booleantableId);
        if (deleted == null) {
            LOGGER.debug("No BooleanTable found with id: {}", booleantableId);
            throw new EntityNotFoundException(String.valueOf(booleantableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<BooleanTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BooleanTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<BooleanTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BooleanTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table BooleanTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<BooleanTable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

