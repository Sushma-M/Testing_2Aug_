/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Urtable2;

/**
 * ServiceImpl object for domain model class Urtable2.
 *
 * @see Urtable2
 */
@Service("DB123Testing.Urtable2Service")
public class Urtable2ServiceImpl implements Urtable2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Urtable2ServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.Urtable2Dao")
    private WMGenericDao<Urtable2, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Urtable2, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public Urtable2 create(Urtable2 urtable2) {
        LOGGER.debug("Creating a new Urtable2 with information: {}", urtable2);
        return this.wmGenericDao.create(urtable2);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Urtable2 getById(String urtable2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Urtable2 by id: {}", urtable2Id);
        Urtable2 urtable2 = this.wmGenericDao.findById(urtable2Id);
        if (urtable2 == null){
            LOGGER.debug("No Urtable2 found with id: {}", urtable2Id);
            throw new EntityNotFoundException(String.valueOf(urtable2Id));
        }
        return urtable2;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public Urtable2 update(Urtable2 urtable2) throws EntityNotFoundException {
        LOGGER.debug("Updating Urtable2 with information: {}", urtable2);
        this.wmGenericDao.update(urtable2);

        String urtable2Id = urtable2.getId();

        return this.wmGenericDao.findById(urtable2Id);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public Urtable2 delete(String urtable2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Urtable2 with id: {}", urtable2Id);
        Urtable2 deleted = this.wmGenericDao.findById(urtable2Id);
        if (deleted == null) {
            LOGGER.debug("No Urtable2 found with id: {}", urtable2Id);
            throw new EntityNotFoundException(String.valueOf(urtable2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<Urtable2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Urtable2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Urtable2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Urtable2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table Urtable2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Urtable2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

