/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Utable1;
import com.testing26thjuly_.db123testing.Utable1Id;

/**
 * ServiceImpl object for domain model class Utable1.
 *
 * @see Utable1
 */
@Service("DB123Testing.Utable1Service")
public class Utable1ServiceImpl implements Utable1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Utable1ServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.Utable1Dao")
    private WMGenericDao<Utable1, Utable1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Utable1, Utable1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public Utable1 create(Utable1 utable1) {
        LOGGER.debug("Creating a new Utable1 with information: {}", utable1);
        return this.wmGenericDao.create(utable1);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Utable1 getById(Utable1Id utable1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Utable1 by id: {}", utable1Id);
        Utable1 utable1 = this.wmGenericDao.findById(utable1Id);
        if (utable1 == null){
            LOGGER.debug("No Utable1 found with id: {}", utable1Id);
            throw new EntityNotFoundException(String.valueOf(utable1Id));
        }
        return utable1;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public Utable1 update(Utable1 utable1) throws EntityNotFoundException {
        LOGGER.debug("Updating Utable1 with information: {}", utable1);
        this.wmGenericDao.update(utable1);

        Utable1Id utable1Id = new Utable1Id();
        utable1Id.setId(utable1.getId());
        utable1Id.setCompany(utable1.getCompany());
        utable1Id.setContactName(utable1.getContactName());
        utable1Id.setAddress(utable1.getAddress());
        utable1Id.setCity(utable1.getCity());

        return this.wmGenericDao.findById(utable1Id);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public Utable1 delete(Utable1Id utable1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Utable1 with id: {}", utable1Id);
        Utable1 deleted = this.wmGenericDao.findById(utable1Id);
        if (deleted == null) {
            LOGGER.debug("No Utable1 found with id: {}", utable1Id);
            throw new EntityNotFoundException(String.valueOf(utable1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<Utable1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Utable1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Utable1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Utable1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table Utable1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Utable1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

