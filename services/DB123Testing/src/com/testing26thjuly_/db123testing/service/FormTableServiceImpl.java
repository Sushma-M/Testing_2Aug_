/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.FormTable;

/**
 * ServiceImpl object for domain model class FormTable.
 *
 * @see FormTable
 */
@Service("DB123Testing.FormTableService")
public class FormTableServiceImpl implements FormTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormTableServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.FormTableDao")
    private WMGenericDao<FormTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FormTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public FormTable create(FormTable formtable) {
        LOGGER.debug("Creating a new FormTable with information: {}", formtable);
        return this.wmGenericDao.create(formtable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public FormTable getById(Integer formtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding FormTable by id: {}", formtableId);
        FormTable formtable = this.wmGenericDao.findById(formtableId);
        if (formtable == null){
            LOGGER.debug("No FormTable found with id: {}", formtableId);
            throw new EntityNotFoundException(String.valueOf(formtableId));
        }
        return formtable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public FormTable update(FormTable formtable) throws EntityNotFoundException {
        LOGGER.debug("Updating FormTable with information: {}", formtable);
        this.wmGenericDao.update(formtable);

        Integer formtableId = formtable.getId();

        return this.wmGenericDao.findById(formtableId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public FormTable delete(Integer formtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormTable with id: {}", formtableId);
        FormTable deleted = this.wmGenericDao.findById(formtableId);
        if (deleted == null) {
            LOGGER.debug("No FormTable found with id: {}", formtableId);
            throw new EntityNotFoundException(String.valueOf(formtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<FormTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FormTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<FormTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FormTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table FormTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<FormTable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

