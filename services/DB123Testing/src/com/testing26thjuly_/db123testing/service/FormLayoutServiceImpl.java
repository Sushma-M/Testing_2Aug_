/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.FormLayout;

/**
 * ServiceImpl object for domain model class FormLayout.
 *
 * @see FormLayout
 */
@Service("DB123Testing.FormLayoutService")
public class FormLayoutServiceImpl implements FormLayoutService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormLayoutServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.FormLayoutDao")
    private WMGenericDao<FormLayout, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FormLayout, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public FormLayout create(FormLayout formlayout) {
        LOGGER.debug("Creating a new FormLayout with information: {}", formlayout);
        return this.wmGenericDao.create(formlayout);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public FormLayout getById(Integer formlayoutId) throws EntityNotFoundException {
        LOGGER.debug("Finding FormLayout by id: {}", formlayoutId);
        FormLayout formlayout = this.wmGenericDao.findById(formlayoutId);
        if (formlayout == null){
            LOGGER.debug("No FormLayout found with id: {}", formlayoutId);
            throw new EntityNotFoundException(String.valueOf(formlayoutId));
        }
        return formlayout;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public FormLayout update(FormLayout formlayout) throws EntityNotFoundException {
        LOGGER.debug("Updating FormLayout with information: {}", formlayout);
        this.wmGenericDao.update(formlayout);

        Integer formlayoutId = formlayout.getId();

        return this.wmGenericDao.findById(formlayoutId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public FormLayout delete(Integer formlayoutId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormLayout with id: {}", formlayoutId);
        FormLayout deleted = this.wmGenericDao.findById(formlayoutId);
        if (deleted == null) {
            LOGGER.debug("No FormLayout found with id: {}", formlayoutId);
            throw new EntityNotFoundException(String.valueOf(formlayoutId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<FormLayout> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FormLayouts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<FormLayout> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FormLayouts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table FormLayout to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<FormLayout> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

