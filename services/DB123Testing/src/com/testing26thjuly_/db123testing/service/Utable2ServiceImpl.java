/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Utable2;

/**
 * ServiceImpl object for domain model class Utable2.
 *
 * @see Utable2
 */
@Service("DB123Testing.Utable2Service")
public class Utable2ServiceImpl implements Utable2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Utable2ServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.Utable2Dao")
    private WMGenericDao<Utable2, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Utable2, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public Utable2 create(Utable2 utable2) {
        LOGGER.debug("Creating a new Utable2 with information: {}", utable2);
        return this.wmGenericDao.create(utable2);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Utable2 getById(String utable2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Utable2 by id: {}", utable2Id);
        Utable2 utable2 = this.wmGenericDao.findById(utable2Id);
        if (utable2 == null){
            LOGGER.debug("No Utable2 found with id: {}", utable2Id);
            throw new EntityNotFoundException(String.valueOf(utable2Id));
        }
        return utable2;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public Utable2 update(Utable2 utable2) throws EntityNotFoundException {
        LOGGER.debug("Updating Utable2 with information: {}", utable2);
        this.wmGenericDao.update(utable2);

        String utable2Id = utable2.getId();

        return this.wmGenericDao.findById(utable2Id);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public Utable2 delete(String utable2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Utable2 with id: {}", utable2Id);
        Utable2 deleted = this.wmGenericDao.findById(utable2Id);
        if (deleted == null) {
            LOGGER.debug("No Utable2 found with id: {}", utable2Id);
            throw new EntityNotFoundException(String.valueOf(utable2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<Utable2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Utable2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Utable2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Utable2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table Utable2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Utable2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

