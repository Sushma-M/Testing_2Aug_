/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.TypesSpacing;

/**
 * ServiceImpl object for domain model class TypesSpacing.
 *
 * @see TypesSpacing
 */
@Service("DB123Testing.TypesSpacingService")
public class TypesSpacingServiceImpl implements TypesSpacingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypesSpacingServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.TypesSpacingDao")
    private WMGenericDao<TypesSpacing, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypesSpacing, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public TypesSpacing create(TypesSpacing typesspacing) {
        LOGGER.debug("Creating a new TypesSpacing with information: {}", typesspacing);
        return this.wmGenericDao.create(typesspacing);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public TypesSpacing getById(Integer typesspacingId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypesSpacing by id: {}", typesspacingId);
        TypesSpacing typesspacing = this.wmGenericDao.findById(typesspacingId);
        if (typesspacing == null){
            LOGGER.debug("No TypesSpacing found with id: {}", typesspacingId);
            throw new EntityNotFoundException(String.valueOf(typesspacingId));
        }
        return typesspacing;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public TypesSpacing update(TypesSpacing typesspacing) throws EntityNotFoundException {
        LOGGER.debug("Updating TypesSpacing with information: {}", typesspacing);
        this.wmGenericDao.update(typesspacing);

        Integer typesspacingId = typesspacing.getId();

        return this.wmGenericDao.findById(typesspacingId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public TypesSpacing delete(Integer typesspacingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypesSpacing with id: {}", typesspacingId);
        TypesSpacing deleted = this.wmGenericDao.findById(typesspacingId);
        if (deleted == null) {
            LOGGER.debug("No TypesSpacing found with id: {}", typesspacingId);
            throw new EntityNotFoundException(String.valueOf(typesspacingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<TypesSpacing> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypesSpacings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<TypesSpacing> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypesSpacings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table TypesSpacing to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypesSpacing> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

