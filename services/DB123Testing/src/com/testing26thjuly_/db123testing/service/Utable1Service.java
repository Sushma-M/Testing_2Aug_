/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Utable1;
import com.testing26thjuly_.db123testing.Utable1Id;

/**
 * Service object for domain model class Utable1.
 *
 * @see {@link Utable1}
 */
public interface Utable1Service {

    /**
     * Creates a new Utable1.
     *
     * @param utable1 The information of the created CompositeTable.
     * @return The created Utable1.
     */
	Utable1 create(Utable1 utable1);


	/**
	 * Finds Utable1 by id.
	 *
	 * @param utable1Id The id of the wanted Utable1.
	 * @return The found Utable1. If no Utable1 is found, this method returns null.
	 */
	Utable1 getById(Utable1Id utable1Id) throws EntityNotFoundException;

	/**
	 * Updates the information of a Utable1.
	 *
	 * @param utable1 The information of the updated Utable1.
	 * @return The updated Utable1.
     *
	 * @throws EntityNotFoundException if no Utable1 is found with given id.
	 */
	Utable1 update(Utable1 utable1) throws EntityNotFoundException;

    /**
	 * Deletes a Utable1.
	 *
	 * @param utable1Id The id of the deleted Utable1.
	 * @return The deleted Utable1.
     *
	 * @throws EntityNotFoundException if no Utable1 is found with the given id.
	 */
	Utable1 delete(Utable1Id utable1Id) throws EntityNotFoundException;

	/**
	 * Finds all Utable1s.
	 *
	 * @return A list of Utable1s.
	 */
    @Deprecated
	Page<Utable1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Utable1s.
	 * @return A list of Utable1s.
	 */
    Page<Utable1> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Utable1s in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Utable1.
	 */
	long count(String query);

    Page<Utable1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

