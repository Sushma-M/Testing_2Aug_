/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.YesNoTable;

/**
 * ServiceImpl object for domain model class YesNoTable.
 *
 * @see YesNoTable
 */
@Service("DB123Testing.YesNoTableService")
public class YesNoTableServiceImpl implements YesNoTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(YesNoTableServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.YesNoTableDao")
    private WMGenericDao<YesNoTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<YesNoTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
	public YesNoTable create(YesNoTable yesnotable) {
        LOGGER.debug("Creating a new YesNoTable with information: {}", yesnotable);
        return this.wmGenericDao.create(yesnotable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public YesNoTable getById(Integer yesnotableId) throws EntityNotFoundException {
        LOGGER.debug("Finding YesNoTable by id: {}", yesnotableId);
        YesNoTable yesnotable = this.wmGenericDao.findById(yesnotableId);
        if (yesnotable == null){
            LOGGER.debug("No YesNoTable found with id: {}", yesnotableId);
            throw new EntityNotFoundException(String.valueOf(yesnotableId));
        }
        return yesnotable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
	@Override
	public YesNoTable update(YesNoTable yesnotable) throws EntityNotFoundException {
        LOGGER.debug("Updating YesNoTable with information: {}", yesnotable);
        this.wmGenericDao.update(yesnotable);

        Integer yesnotableId = yesnotable.getId();

        return this.wmGenericDao.findById(yesnotableId);
    }

    @Transactional(value = "DB123TestingTransactionManager")
	@Override
	public YesNoTable delete(Integer yesnotableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting YesNoTable with id: {}", yesnotableId);
        YesNoTable deleted = this.wmGenericDao.findById(yesnotableId);
        if (deleted == null) {
            LOGGER.debug("No YesNoTable found with id: {}", yesnotableId);
            throw new EntityNotFoundException(String.valueOf(yesnotableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public Page<YesNoTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all YesNoTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<YesNoTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all YesNoTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB123Testing for table YesNoTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB123TestingTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<YesNoTable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

