/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.Form;

/**
 * Service object for domain model class Form.
 *
 * @see {@link Form}
 */
public interface FormService {

    /**
     * Creates a new Form.
     *
     * @param form The information of the created CompositeTable.
     * @return The created Form.
     */
	Form create(Form form);


	/**
	 * Finds Form by id.
	 *
	 * @param formId The id of the wanted Form.
	 * @return The found Form. If no Form is found, this method returns null.
	 */
	Form getById(String formId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Form.
	 *
	 * @param form The information of the updated Form.
	 * @return The updated Form.
     *
	 * @throws EntityNotFoundException if no Form is found with given id.
	 */
	Form update(Form form) throws EntityNotFoundException;

    /**
	 * Deletes a Form.
	 *
	 * @param formId The id of the deleted Form.
	 * @return The deleted Form.
     *
	 * @throws EntityNotFoundException if no Form is found with the given id.
	 */
	Form delete(String formId) throws EntityNotFoundException;

	/**
	 * Finds all Forms.
	 *
	 * @return A list of Forms.
	 */
    @Deprecated
	Page<Form> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Forms.
	 * @return A list of Forms.
	 */
    Page<Form> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Forms in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Form.
	 */
	long count(String query);

    Page<Form> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

