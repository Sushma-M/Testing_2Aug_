/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.db123testing.NewTypesUser;

/**
 * Service object for domain model class NewTypesUser.
 *
 * @see {@link NewTypesUser}
 */
public interface NewTypesUserService {

    /**
     * Creates a new NewTypesUser.
     *
     * @param newTypesUser The information of the created CompositeTable.
     * @return The created NewTypesUser.
     */
	NewTypesUser create(NewTypesUser newTypesUser);


	/**
	 * Finds NewTypesUser by id.
	 *
	 * @param newTypesUserId The id of the wanted NewTypesUser.
	 * @return The found NewTypesUser. If no NewTypesUser is found, this method returns null.
	 */
	NewTypesUser getById(Integer newTypesUserId) throws EntityNotFoundException;

	/**
	 * Updates the information of a NewTypesUser.
	 *
	 * @param newTypesUser The information of the updated NewTypesUser.
	 * @return The updated NewTypesUser.
     *
	 * @throws EntityNotFoundException if no NewTypesUser is found with given id.
	 */
	NewTypesUser update(NewTypesUser newTypesUser) throws EntityNotFoundException;

    /**
	 * Deletes a NewTypesUser.
	 *
	 * @param newTypesUserId The id of the deleted NewTypesUser.
	 * @return The deleted NewTypesUser.
     *
	 * @throws EntityNotFoundException if no NewTypesUser is found with the given id.
	 */
	NewTypesUser delete(Integer newTypesUserId) throws EntityNotFoundException;

	/**
	 * Finds all NewTypesUsers.
	 *
	 * @return A list of NewTypesUsers.
	 */
    @Deprecated
	Page<NewTypesUser> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all NewTypesUsers.
	 * @return A list of NewTypesUsers.
	 */
    Page<NewTypesUser> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the NewTypesUsers in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the NewTypesUser.
	 */
	long count(String query);

    Page<NewTypesUser> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

