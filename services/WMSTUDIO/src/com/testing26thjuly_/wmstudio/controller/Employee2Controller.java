/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio.Employee2;
import com.testing26thjuly_.wmstudio.service.Employee2Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Employee2.
 * @see Employee2
 */
@RestController("WMSTUDIO.Employee2Controller")
@RequestMapping("/WMSTUDIO/Employee2")
@Api(description = "Exposes APIs to work with Employee2 resource.", value = "Employee2Controller")
public class Employee2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Employee2Controller.class);

    @Autowired
    @Qualifier("WMSTUDIO.Employee2Service")
    private Employee2Service employee2Service;

    /**
     * @deprecated Use {@link #findEmployee2s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Employee2 instances matching the search criteria.")
    public Page<Employee2> findEmployee2s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Employee2s list");
        return employee2Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Employee2 instances matching the search criteria.")
    public Page<Employee2> findEmployee2s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employee2s list");
        return employee2Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployee2s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employee2Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Employee2Service instance
	 */
    protected void setEmployee2Service(Employee2Service service) {
        this.employee2Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Employee2 instance.")
    public Employee2 createEmployee2(@RequestBody Employee2 employee2) {
        LOGGER.debug("Create Employee2 with information: {}", employee2);
        employee2 = employee2Service.create(employee2);
        LOGGER.debug("Created Employee2 with information: {}", employee2);
        return employee2;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Employee2 instances.")
    public Long countEmployee2s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Employee2s");
        return employee2Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Employee2 instance associated with the given id.")
    public Employee2 getEmployee2(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Employee2 with id: {}", id);
        Employee2 foundEmployee2 = employee2Service.getById(id);
        LOGGER.debug("Employee2 details with id: {}", foundEmployee2);
        return foundEmployee2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Employee2 instance associated with the given id.")
    public Employee2 editEmployee2(@PathVariable(value = "id") Integer id, @RequestBody Employee2 employee2) throws EntityNotFoundException {
        LOGGER.debug("Editing Employee2 with id: {}", employee2.getEid());
        employee2.setEid(id);
        employee2 = employee2Service.update(employee2);
        LOGGER.debug("Employee2 details with id: {}", employee2);
        return employee2;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Employee2 instance associated with the given id.")
    public boolean deleteEmployee2(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee2 with id: {}", id);
        Employee2 deletedEmployee2 = employee2Service.delete(id);
        return deletedEmployee2 != null;
    }
}
