/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio.CfgSkill;
import com.testing26thjuly_.wmstudio.Skill;
import com.testing26thjuly_.wmstudio.service.CfgSkillService;
import com.testing26thjuly_.wmstudio.service.SkillService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CfgSkill.
 * @see CfgSkill
 */
@RestController("WMSTUDIO.CfgSkillController")
@RequestMapping("/WMSTUDIO/CfgSkill")
@Api(description = "Exposes APIs to work with CfgSkill resource.", value = "CfgSkillController")
public class CfgSkillController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CfgSkillController.class);

    @Autowired
    @Qualifier("WMSTUDIO.CfgSkillService")
    private CfgSkillService cfgSkillService;

    @Autowired
    @Qualifier("WMSTUDIO.SkillService")
    private SkillService skillService;

    /**
     * @deprecated Use {@link #findCfgSkills(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CfgSkill instances matching the search criteria.")
    public Page<CfgSkill> findCfgSkills(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CfgSkills list");
        return cfgSkillService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CfgSkill instances matching the search criteria.")
    public Page<CfgSkill> findCfgSkills(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CfgSkills list");
        return cfgSkillService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCfgSkills(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return cfgSkillService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/skills", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the skills instance associated with the given id.")
    public Page<Skill> findAssociatedSkills(Pageable pageable, @PathVariable("id") Double id) {
        LOGGER.debug("Fetching all associated skills");
        return skillService.findAssociatedValues(id, "cfgSkill", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CfgSkillService instance
	 */
    protected void setCfgSkillService(CfgSkillService service) {
        this.cfgSkillService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SkillService instance
	 */
    protected void setSkillService(SkillService service) {
        this.skillService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CfgSkill instance.")
    public CfgSkill createCfgSkill(@RequestBody CfgSkill cfgskill) {
        LOGGER.debug("Create CfgSkill with information: {}", cfgskill);
        cfgskill = cfgSkillService.create(cfgskill);
        LOGGER.debug("Created CfgSkill with information: {}", cfgskill);
        return cfgskill;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CfgSkill instances.")
    public Long countCfgSkills(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting CfgSkills");
        return cfgSkillService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CfgSkill instance associated with the given id.")
    public CfgSkill getCfgSkill(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting CfgSkill with id: {}", id);
        CfgSkill foundCfgSkill = cfgSkillService.getById(id);
        LOGGER.debug("CfgSkill details with id: {}", foundCfgSkill);
        return foundCfgSkill;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CfgSkill instance associated with the given id.")
    public CfgSkill editCfgSkill(@PathVariable(value = "id") Double id, @RequestBody CfgSkill cfgskill) throws EntityNotFoundException {
        LOGGER.debug("Editing CfgSkill with id: {}", cfgskill.getId());
        cfgskill.setId(id);
        cfgskill = cfgSkillService.update(cfgskill);
        LOGGER.debug("CfgSkill details with id: {}", cfgskill);
        return cfgskill;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CfgSkill instance associated with the given id.")
    public boolean deleteCfgSkill(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CfgSkill with id: {}", id);
        CfgSkill deletedCfgSkill = cfgSkillService.delete(id);
        return deletedCfgSkill != null;
    }
}
