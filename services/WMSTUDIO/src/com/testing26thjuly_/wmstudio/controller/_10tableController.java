/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio._10table;
import com.testing26thjuly_.wmstudio.service._10tableService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class _10table.
 * @see _10table
 */
@RestController("WMSTUDIO._10tableController")
@RequestMapping("/WMSTUDIO/_10table")
@Api(description = "Exposes APIs to work with _10table resource.", value = "_10tableController")
public class _10tableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(_10tableController.class);

    @Autowired
    @Qualifier("WMSTUDIO._10tableService")
    private _10tableService _10tableService;

    /**
     * @deprecated Use {@link #find_10tables(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of _10table instances matching the search criteria.")
    public Page<_10table> find_10tables(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering _10tables list");
        return _10tableService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of _10table instances matching the search criteria.")
    public Page<_10table> find_10tables(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering _10tables list");
        return _10tableService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable export_10tables(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return _10tableService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service _10tableService instance
	 */
    protected void set_10tableService(_10tableService service) {
        this._10tableService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new _10table instance.")
    public _10table create_10table(@RequestBody _10table _10table) {
        LOGGER.debug("Create _10table with information: {}", _10table);
        _10table = _10tableService.create(_10table);
        LOGGER.debug("Created _10table with information: {}", _10table);
        return _10table;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of _10table instances.")
    public Long count_10tables(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting _10tables");
        return _10tableService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the _10table instance associated with the given id.")
    public _10table get_10table(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting _10table with id: {}", id);
        _10table found_10table = _10tableService.getById(id);
        LOGGER.debug("_10table details with id: {}", found_10table);
        return found_10table;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the _10table instance associated with the given id.")
    public _10table edit_10table(@PathVariable(value = "id") Integer id, @RequestBody _10table _10table) throws EntityNotFoundException {
        LOGGER.debug("Editing _10table with id: {}", _10table.getId());
        _10table.setId(id);
        _10table = _10tableService.update(_10table);
        LOGGER.debug("_10table details with id: {}", _10table);
        return _10table;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the _10table instance associated with the given id.")
    public boolean delete_10table(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting _10table with id: {}", id);
        _10table deleted_10table = _10tableService.delete(id);
        return deleted_10table != null;
    }
}
