/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio.CallRouting;
import com.testing26thjuly_.wmstudio.Skill;
import com.testing26thjuly_.wmstudio.service.CallRoutingService;
import com.testing26thjuly_.wmstudio.service.SkillService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Skill.
 * @see Skill
 */
@RestController("WMSTUDIO.SkillController")
@RequestMapping("/WMSTUDIO/Skill")
@Api(description = "Exposes APIs to work with Skill resource.", value = "SkillController")
public class SkillController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SkillController.class);

    @Autowired
    @Qualifier("WMSTUDIO.SkillService")
    private SkillService skillService;

    @Autowired
    @Qualifier("WMSTUDIO.CallRoutingService")
    private CallRoutingService callRoutingService;

    /**
     * @deprecated Use {@link #findSkills(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Skill instances matching the search criteria.")
    public Page<Skill> findSkills(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Skills list");
        return skillService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Skill instances matching the search criteria.")
    public Page<Skill> findSkills(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Skills list");
        return skillService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportSkills(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return skillService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/callRoutings", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the callRoutings instance associated with the given id.")
    public Page<CallRouting> findAssociatedCallRoutings(Pageable pageable, @PathVariable("id") Double id) {
        LOGGER.debug("Fetching all associated callRoutings");
        return callRoutingService.findAssociatedValues(id, "skill", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SkillService instance
	 */
    protected void setSkillService(SkillService service) {
        this.skillService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CallRoutingService instance
	 */
    protected void setCallRoutingService(CallRoutingService service) {
        this.callRoutingService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Skill instance.")
    public Skill createSkill(@RequestBody Skill skill) {
        LOGGER.debug("Create Skill with information: {}", skill);
        skill = skillService.create(skill);
        LOGGER.debug("Created Skill with information: {}", skill);
        return skill;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Skill instances.")
    public Long countSkills(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Skills");
        return skillService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Skill instance associated with the given id.")
    public Skill getSkill(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting Skill with id: {}", id);
        Skill foundSkill = skillService.getById(id);
        LOGGER.debug("Skill details with id: {}", foundSkill);
        return foundSkill;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Skill instance associated with the given id.")
    public Skill editSkill(@PathVariable(value = "id") Double id, @RequestBody Skill skill) throws EntityNotFoundException {
        LOGGER.debug("Editing Skill with id: {}", skill.getId());
        skill.setId(id);
        skill = skillService.update(skill);
        LOGGER.debug("Skill details with id: {}", skill);
        return skill;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Skill instance associated with the given id.")
    public boolean deleteSkill(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Skill with id: {}", id);
        Skill deletedSkill = skillService.delete(id);
        return deletedSkill != null;
    }
}
