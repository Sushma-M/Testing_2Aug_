/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio.Table37;
import com.testing26thjuly_.wmstudio.service.Table37Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table37.
 * @see Table37
 */
@RestController("WMSTUDIO.Table37Controller")
@RequestMapping("/WMSTUDIO/Table37")
@Api(description = "Exposes APIs to work with Table37 resource.", value = "Table37Controller")
public class Table37Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table37Controller.class);

    @Autowired
    @Qualifier("WMSTUDIO.Table37Service")
    private Table37Service table37Service;

    /**
     * @deprecated Use {@link #findTable37s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table37 instances matching the search criteria.")
    public Page<Table37> findTable37s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table37s list");
        return table37Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table37 instances matching the search criteria.")
    public Page<Table37> findTable37s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table37s list");
        return table37Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable37s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table37Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table37Service instance
	 */
    protected void setTable37Service(Table37Service service) {
        this.table37Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table37 instance.")
    public Table37 createTable37(@RequestBody Table37 table37) {
        LOGGER.debug("Create Table37 with information: {}", table37);
        table37 = table37Service.create(table37);
        LOGGER.debug("Created Table37 with information: {}", table37);
        return table37;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table37 instances.")
    public Long countTable37s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table37s");
        return table37Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table37 instance associated with the given id.")
    public Table37 getTable37(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table37 with id: {}", id);
        Table37 foundTable37 = table37Service.getById(id);
        LOGGER.debug("Table37 details with id: {}", foundTable37);
        return foundTable37;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table37 instance associated with the given id.")
    public Table37 editTable37(@PathVariable(value = "id") Integer id, @RequestBody Table37 table37) throws EntityNotFoundException {
        LOGGER.debug("Editing Table37 with id: {}", table37.getId());
        table37.setId(id);
        table37 = table37Service.update(table37);
        LOGGER.debug("Table37 details with id: {}", table37);
        return table37;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table37 instance associated with the given id.")
    public boolean deleteTable37(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table37 with id: {}", id);
        Table37 deletedTable37 = table37Service.delete(id);
        return deletedTable37 != null;
    }
}
