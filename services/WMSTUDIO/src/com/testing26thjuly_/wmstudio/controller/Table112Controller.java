/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.wmstudio.Table112;
import com.testing26thjuly_.wmstudio.Table112Id;
import com.testing26thjuly_.wmstudio.service.Table112Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table112.
 * @see Table112
 */
@RestController("WMSTUDIO.Table112Controller")
@RequestMapping("/WMSTUDIO/Table112")
@Api(description = "Exposes APIs to work with Table112 resource.", value = "Table112Controller")
public class Table112Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table112Controller.class);

    @Autowired
    @Qualifier("WMSTUDIO.Table112Service")
    private Table112Service table112Service;

    /**
     * @deprecated Use {@link #findTable112s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table112 instances matching the search criteria.")
    public Page<Table112> findTable112s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table112s list");
        return table112Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table112 instances matching the search criteria.")
    public Page<Table112> findTable112s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table112s list");
        return table112Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable112s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table112Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table112Service instance
	 */
    protected void setTable112Service(Table112Service service) {
        this.table112Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table112 instance.")
    public Table112 createTable112(@RequestBody Table112 table112) {
        LOGGER.debug("Create Table112 with information: {}", table112);
        table112 = table112Service.create(table112);
        LOGGER.debug("Created Table112 with information: {}", table112);
        return table112;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table112 instance associated with the given composite-id.")
    public Table112 getTable112(@RequestParam(value = "column1", required = true) Long column1, @RequestParam(value = "column2", required = true) Long column2) throws EntityNotFoundException {
        Table112Id table112Id = new Table112Id();
        table112Id.setColumn1(column1);
        table112Id.setColumn2(column2);
        LOGGER.debug("Getting Table112 with id: {}", table112Id);
        Table112 table112 = table112Service.getById(table112Id);
        LOGGER.debug("Table112 details with id: {}", table112);
        return table112;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table112 instance associated with the given composite-id.")
    public Table112 editTable112(@RequestParam(value = "column1", required = true) Long column1, @RequestParam(value = "column2", required = true) Long column2, @RequestBody Table112 table112) throws EntityNotFoundException {
        Table112Id table112Id = new Table112Id();
        table112Id.setColumn1(column1);
        table112Id.setColumn2(column2);
        table112Service.delete(table112Id);
        table112 = table112Service.create(table112);
        LOGGER.debug("Table112 details with id is updated: {}", table112);
        return table112;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table112 instance associated with the given composite-id.")
    public boolean deleteTable112(@RequestParam(value = "column1", required = true) Long column1, @RequestParam(value = "column2", required = true) Long column2) throws EntityNotFoundException {
        Table112Id table112Id = new Table112Id();
        table112Id.setColumn1(column1);
        table112Id.setColumn2(column2);
        LOGGER.debug("Deleting Table112 with id: {}", table112Id);
        Table112 table112 = table112Service.delete(table112Id);
        return table112 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table112 instances.")
    public Long countTable112s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table112s");
        return table112Service.count(query);
    }
}
