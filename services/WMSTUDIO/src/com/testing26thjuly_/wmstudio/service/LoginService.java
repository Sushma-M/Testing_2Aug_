/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.Login;

/**
 * Service object for domain model class Login.
 *
 * @see {@link Login}
 */
public interface LoginService {

    /**
     * Creates a new Login.
     *
     * @param login The information of the created CompositeTable.
     * @return The created Login.
     */
	Login create(Login login);


	/**
	 * Finds Login by id.
	 *
	 * @param loginId The id of the wanted Login.
	 * @return The found Login. If no Login is found, this method returns null.
	 */
	Login getById(Integer loginId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Login.
	 *
	 * @param login The information of the updated Login.
	 * @return The updated Login.
     *
	 * @throws EntityNotFoundException if no Login is found with given id.
	 */
	Login update(Login login) throws EntityNotFoundException;

    /**
	 * Deletes a Login.
	 *
	 * @param loginId The id of the deleted Login.
	 * @return The deleted Login.
     *
	 * @throws EntityNotFoundException if no Login is found with the given id.
	 */
	Login delete(Integer loginId) throws EntityNotFoundException;

	/**
	 * Finds all Logins.
	 *
	 * @return A list of Logins.
	 */
    @Deprecated
	Page<Login> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Logins.
	 * @return A list of Logins.
	 */
    Page<Login> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Logins in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Login.
	 */
	long count(String query);

    Page<Login> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

