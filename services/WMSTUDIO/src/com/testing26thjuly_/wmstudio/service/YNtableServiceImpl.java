/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.YNtable;

/**
 * ServiceImpl object for domain model class YNtable.
 *
 * @see YNtable
 */
@Service("WMSTUDIO.YNtableService")
public class YNtableServiceImpl implements YNtableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(YNtableServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.YNtableDao")
    private WMGenericDao<YNtable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<YNtable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public YNtable create(YNtable yntable) {
        LOGGER.debug("Creating a new YNtable with information: {}", yntable);
        return this.wmGenericDao.create(yntable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public YNtable getById(Integer yntableId) throws EntityNotFoundException {
        LOGGER.debug("Finding YNtable by id: {}", yntableId);
        YNtable yntable = this.wmGenericDao.findById(yntableId);
        if (yntable == null){
            LOGGER.debug("No YNtable found with id: {}", yntableId);
            throw new EntityNotFoundException(String.valueOf(yntableId));
        }
        return yntable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public YNtable update(YNtable yntable) throws EntityNotFoundException {
        LOGGER.debug("Updating YNtable with information: {}", yntable);
        this.wmGenericDao.update(yntable);

        Integer yntableId = yntable.getId();

        return this.wmGenericDao.findById(yntableId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public YNtable delete(Integer yntableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting YNtable with id: {}", yntableId);
        YNtable deleted = this.wmGenericDao.findById(yntableId);
        if (deleted == null) {
            LOGGER.debug("No YNtable found with id: {}", yntableId);
            throw new EntityNotFoundException(String.valueOf(yntableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<YNtable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all YNtables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<YNtable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all YNtables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table YNtable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<YNtable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

