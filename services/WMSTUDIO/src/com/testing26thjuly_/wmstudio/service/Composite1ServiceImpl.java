/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.Composite1;
import com.testing26thjuly_.wmstudio.Composite1Id;

/**
 * ServiceImpl object for domain model class Composite1.
 *
 * @see Composite1
 */
@Service("WMSTUDIO.Composite1Service")
public class Composite1ServiceImpl implements Composite1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Composite1ServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.Composite1Dao")
    private WMGenericDao<Composite1, Composite1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Composite1, Composite1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Composite1 create(Composite1 composite1) {
        LOGGER.debug("Creating a new Composite1 with information: {}", composite1);
        return this.wmGenericDao.create(composite1);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Composite1 getById(Composite1Id composite1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Composite1 by id: {}", composite1Id);
        Composite1 composite1 = this.wmGenericDao.findById(composite1Id);
        if (composite1 == null){
            LOGGER.debug("No Composite1 found with id: {}", composite1Id);
            throw new EntityNotFoundException(String.valueOf(composite1Id));
        }
        return composite1;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Composite1 update(Composite1 composite1) throws EntityNotFoundException {
        LOGGER.debug("Updating Composite1 with information: {}", composite1);
        this.wmGenericDao.update(composite1);

        Composite1Id composite1Id = new Composite1Id();
        composite1Id.setStringCol(composite1.getStringCol());
        composite1Id.setId(composite1.getId());
        composite1Id.setShortCol(composite1.getShortCol());

        return this.wmGenericDao.findById(composite1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Composite1 delete(Composite1Id composite1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Composite1 with id: {}", composite1Id);
        Composite1 deleted = this.wmGenericDao.findById(composite1Id);
        if (deleted == null) {
            LOGGER.debug("No Composite1 found with id: {}", composite1Id);
            throw new EntityNotFoundException(String.valueOf(composite1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Composite1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Composite1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Composite1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Composite1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Composite1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Composite1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

