/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.Table112;
import com.testing26thjuly_.wmstudio.Table112Id;

/**
 * ServiceImpl object for domain model class Table112.
 *
 * @see Table112
 */
@Service("WMSTUDIO.Table112Service")
public class Table112ServiceImpl implements Table112Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table112ServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.Table112Dao")
    private WMGenericDao<Table112, Table112Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table112, Table112Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Table112 create(Table112 table112) {
        LOGGER.debug("Creating a new Table112 with information: {}", table112);
        return this.wmGenericDao.create(table112);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Table112 getById(Table112Id table112Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table112 by id: {}", table112Id);
        Table112 table112 = this.wmGenericDao.findById(table112Id);
        if (table112 == null){
            LOGGER.debug("No Table112 found with id: {}", table112Id);
            throw new EntityNotFoundException(String.valueOf(table112Id));
        }
        return table112;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Table112 update(Table112 table112) throws EntityNotFoundException {
        LOGGER.debug("Updating Table112 with information: {}", table112);
        this.wmGenericDao.update(table112);

        Table112Id table112Id = new Table112Id();
        table112Id.setColumn1(table112.getColumn1());
        table112Id.setColumn2(table112.getColumn2());

        return this.wmGenericDao.findById(table112Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Table112 delete(Table112Id table112Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table112 with id: {}", table112Id);
        Table112 deleted = this.wmGenericDao.findById(table112Id);
        if (deleted == null) {
            LOGGER.debug("No Table112 found with id: {}", table112Id);
            throw new EntityNotFoundException(String.valueOf(table112Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Table112> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table112s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Table112> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table112s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Table112 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table112> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

