/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.TFTable;

/**
 * ServiceImpl object for domain model class TFTable.
 *
 * @see TFTable
 */
@Service("WMSTUDIO.TFTableService")
public class TFTableServiceImpl implements TFTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TFTableServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.TFTableDao")
    private WMGenericDao<TFTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TFTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public TFTable create(TFTable tftable) {
        LOGGER.debug("Creating a new TFTable with information: {}", tftable);
        return this.wmGenericDao.create(tftable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public TFTable getById(Integer tftableId) throws EntityNotFoundException {
        LOGGER.debug("Finding TFTable by id: {}", tftableId);
        TFTable tftable = this.wmGenericDao.findById(tftableId);
        if (tftable == null){
            LOGGER.debug("No TFTable found with id: {}", tftableId);
            throw new EntityNotFoundException(String.valueOf(tftableId));
        }
        return tftable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public TFTable update(TFTable tftable) throws EntityNotFoundException {
        LOGGER.debug("Updating TFTable with information: {}", tftable);
        this.wmGenericDao.update(tftable);

        Integer tftableId = tftable.getId();

        return this.wmGenericDao.findById(tftableId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public TFTable delete(Integer tftableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TFTable with id: {}", tftableId);
        TFTable deleted = this.wmGenericDao.findById(tftableId);
        if (deleted == null) {
            LOGGER.debug("No TFTable found with id: {}", tftableId);
            throw new EntityNotFoundException(String.valueOf(tftableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<TFTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TFTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<TFTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TFTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table TFTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TFTable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

