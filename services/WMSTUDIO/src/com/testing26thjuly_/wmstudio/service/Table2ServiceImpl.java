/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.Table2;

/**
 * ServiceImpl object for domain model class Table2.
 *
 * @see Table2
 */
@Service("WMSTUDIO.Table2Service")
public class Table2ServiceImpl implements Table2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table2ServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.Table2Dao")
    private WMGenericDao<Table2, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table2, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Table2 create(Table2 table2) {
        LOGGER.debug("Creating a new Table2 with information: {}", table2);
        return this.wmGenericDao.create(table2);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Table2 getById(Long table2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table2 by id: {}", table2Id);
        Table2 table2 = this.wmGenericDao.findById(table2Id);
        if (table2 == null){
            LOGGER.debug("No Table2 found with id: {}", table2Id);
            throw new EntityNotFoundException(String.valueOf(table2Id));
        }
        return table2;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Table2 update(Table2 table2) throws EntityNotFoundException {
        LOGGER.debug("Updating Table2 with information: {}", table2);
        this.wmGenericDao.update(table2);

        Long table2Id = table2.getId();

        return this.wmGenericDao.findById(table2Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Table2 delete(Long table2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table2 with id: {}", table2Id);
        Table2 deleted = this.wmGenericDao.findById(table2Id);
        if (deleted == null) {
            LOGGER.debug("No Table2 found with id: {}", table2Id);
            throw new EntityNotFoundException(String.valueOf(table2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Table2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Table2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Table2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

