/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio.Employee2;

/**
 * Service object for domain model class Employee2.
 *
 * @see {@link Employee2}
 */
public interface Employee2Service {

    /**
     * Creates a new Employee2.
     *
     * @param employee2 The information of the created CompositeTable.
     * @return The created Employee2.
     */
	Employee2 create(Employee2 employee2);


	/**
	 * Finds Employee2 by id.
	 *
	 * @param employee2Id The id of the wanted Employee2.
	 * @return The found Employee2. If no Employee2 is found, this method returns null.
	 */
	Employee2 getById(Integer employee2Id) throws EntityNotFoundException;

	/**
	 * Updates the information of a Employee2.
	 *
	 * @param employee2 The information of the updated Employee2.
	 * @return The updated Employee2.
     *
	 * @throws EntityNotFoundException if no Employee2 is found with given id.
	 */
	Employee2 update(Employee2 employee2) throws EntityNotFoundException;

    /**
	 * Deletes a Employee2.
	 *
	 * @param employee2Id The id of the deleted Employee2.
	 * @return The deleted Employee2.
     *
	 * @throws EntityNotFoundException if no Employee2 is found with the given id.
	 */
	Employee2 delete(Integer employee2Id) throws EntityNotFoundException;

	/**
	 * Finds all Employee2s.
	 *
	 * @return A list of Employee2s.
	 */
    @Deprecated
	Page<Employee2> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Employee2s.
	 * @return A list of Employee2s.
	 */
    Page<Employee2> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Employee2s in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Employee2.
	 */
	long count(String query);

    Page<Employee2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

