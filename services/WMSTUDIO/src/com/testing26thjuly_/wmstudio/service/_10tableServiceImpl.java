/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.wmstudio._10table;

/**
 * ServiceImpl object for domain model class _10table.
 *
 * @see _10table
 */
@Service("WMSTUDIO._10tableService")
public class _10tableServiceImpl implements _10tableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(_10tableServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO._10tableDao")
    private WMGenericDao<_10table, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<_10table, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public _10table create(_10table _10table) {
        LOGGER.debug("Creating a new _10table with information: {}", _10table);
        return this.wmGenericDao.create(_10table);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public _10table getById(Integer _10tableId) throws EntityNotFoundException {
        LOGGER.debug("Finding _10table by id: {}", _10tableId);
        _10table _10table = this.wmGenericDao.findById(_10tableId);
        if (_10table == null){
            LOGGER.debug("No _10table found with id: {}", _10tableId);
            throw new EntityNotFoundException(String.valueOf(_10tableId));
        }
        return _10table;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public _10table update(_10table _10table) throws EntityNotFoundException {
        LOGGER.debug("Updating _10table with information: {}", _10table);
        this.wmGenericDao.update(_10table);

        Integer _10tableId = _10table.getId();

        return this.wmGenericDao.findById(_10tableId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public _10table delete(Integer _10tableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting _10table with id: {}", _10tableId);
        _10table deleted = this.wmGenericDao.findById(_10tableId);
        if (deleted == null) {
            LOGGER.debug("No _10table found with id: {}", _10tableId);
            throw new EntityNotFoundException(String.valueOf(_10tableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<_10table> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all _10tables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<_10table> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all _10tables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table _10table to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<_10table> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

