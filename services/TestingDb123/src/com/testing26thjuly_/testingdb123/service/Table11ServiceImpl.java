/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.testingdb123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.testingdb123.Table11;

/**
 * ServiceImpl object for domain model class Table11.
 *
 * @see Table11
 */
@Service("TestingDb123.Table11Service")
public class Table11ServiceImpl implements Table11Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table11ServiceImpl.class);

    @Autowired
    @Qualifier("TestingDb123.Table11Dao")
    private WMGenericDao<Table11, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table11, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDb123TransactionManager")
    @Override
	public Table11 create(Table11 table11) {
        LOGGER.debug("Creating a new Table11 with information: {}", table11);
        return this.wmGenericDao.create(table11);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Table11 getById(Integer table11Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table11 by id: {}", table11Id);
        Table11 table11 = this.wmGenericDao.findById(table11Id);
        if (table11 == null){
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        return table11;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDb123TransactionManager")
	@Override
	public Table11 update(Table11 table11) throws EntityNotFoundException {
        LOGGER.debug("Updating Table11 with information: {}", table11);
        this.wmGenericDao.update(table11);

        Integer table11Id = table11.getId();

        return this.wmGenericDao.findById(table11Id);
    }

    @Transactional(value = "TestingDb123TransactionManager")
	@Override
	public Table11 delete(Integer table11Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table11 with id: {}", table11Id);
        Table11 deleted = this.wmGenericDao.findById(table11Id);
        if (deleted == null) {
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Page<Table11> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Page<Table11> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDb123 for table Table11 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table11> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

