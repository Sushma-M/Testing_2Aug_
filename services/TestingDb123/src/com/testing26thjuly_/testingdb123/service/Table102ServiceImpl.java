/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.testingdb123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.testingdb123.Table102;

/**
 * ServiceImpl object for domain model class Table102.
 *
 * @see Table102
 */
@Service("TestingDb123.Table102Service")
public class Table102ServiceImpl implements Table102Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table102ServiceImpl.class);

    @Autowired
    @Qualifier("TestingDb123.Table102Dao")
    private WMGenericDao<Table102, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table102, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDb123TransactionManager")
    @Override
	public Table102 create(Table102 table102) {
        LOGGER.debug("Creating a new Table102 with information: {}", table102);
        return this.wmGenericDao.create(table102);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Table102 getById(Integer table102Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table102 by id: {}", table102Id);
        Table102 table102 = this.wmGenericDao.findById(table102Id);
        if (table102 == null){
            LOGGER.debug("No Table102 found with id: {}", table102Id);
            throw new EntityNotFoundException(String.valueOf(table102Id));
        }
        return table102;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDb123TransactionManager")
	@Override
	public Table102 update(Table102 table102) throws EntityNotFoundException {
        LOGGER.debug("Updating Table102 with information: {}", table102);
        this.wmGenericDao.update(table102);

        Integer table102Id = table102.getId();

        return this.wmGenericDao.findById(table102Id);
    }

    @Transactional(value = "TestingDb123TransactionManager")
	@Override
	public Table102 delete(Integer table102Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table102 with id: {}", table102Id);
        Table102 deleted = this.wmGenericDao.findById(table102Id);
        if (deleted == null) {
            LOGGER.debug("No Table102 found with id: {}", table102Id);
            throw new EntityNotFoundException(String.valueOf(table102Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Page<Table102> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table102s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Page<Table102> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table102s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDb123 for table Table102 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table102> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

