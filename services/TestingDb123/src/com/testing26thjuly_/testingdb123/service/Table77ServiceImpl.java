/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.testingdb123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.testingdb123.Table77;

/**
 * ServiceImpl object for domain model class Table77.
 *
 * @see Table77
 */
@Service("TestingDb123.Table77Service")
public class Table77ServiceImpl implements Table77Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table77ServiceImpl.class);

    @Autowired
    @Qualifier("TestingDb123.Table77Dao")
    private WMGenericDao<Table77, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table77, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDb123TransactionManager")
    @Override
	public Table77 create(Table77 table77) {
        LOGGER.debug("Creating a new Table77 with information: {}", table77);
        return this.wmGenericDao.create(table77);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Table77 getById(Long table77Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table77 by id: {}", table77Id);
        Table77 table77 = this.wmGenericDao.findById(table77Id);
        if (table77 == null){
            LOGGER.debug("No Table77 found with id: {}", table77Id);
            throw new EntityNotFoundException(String.valueOf(table77Id));
        }
        return table77;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDb123TransactionManager")
	@Override
	public Table77 update(Table77 table77) throws EntityNotFoundException {
        LOGGER.debug("Updating Table77 with information: {}", table77);
        this.wmGenericDao.update(table77);

        Long table77Id = table77.getId();

        return this.wmGenericDao.findById(table77Id);
    }

    @Transactional(value = "TestingDb123TransactionManager")
	@Override
	public Table77 delete(Long table77Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table77 with id: {}", table77Id);
        Table77 deleted = this.wmGenericDao.findById(table77Id);
        if (deleted == null) {
            LOGGER.debug("No Table77 found with id: {}", table77Id);
            throw new EntityNotFoundException(String.valueOf(table77Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Page<Table77> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table77s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Page<Table77> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table77s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDb123 for table Table77 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table77> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

