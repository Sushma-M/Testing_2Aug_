/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.testingdb123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.testingdb123.Table1Id;
import com.testing26thjuly_.testingdb123.Table6;

/**
 * ServiceImpl object for domain model class Table6.
 *
 * @see Table6
 */
@Service("TestingDb123.Table6Service")
public class Table6ServiceImpl implements Table6Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table6ServiceImpl.class);

    @Autowired
    @Qualifier("TestingDb123.Table6Dao")
    private WMGenericDao<Table6, Table1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table6, Table1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDb123TransactionManager")
    @Override
	public Table6 create(Table6 table6) {
        LOGGER.debug("Creating a new Table6 with information: {}", table6);
        return this.wmGenericDao.create(table6);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Table6 getById(Table1Id table6Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table6 by id: {}", table6Id);
        Table6 table6 = this.wmGenericDao.findById(table6Id);
        if (table6 == null){
            LOGGER.debug("No Table6 found with id: {}", table6Id);
            throw new EntityNotFoundException(String.valueOf(table6Id));
        }
        return table6;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDb123TransactionManager")
	@Override
	public Table6 update(Table6 table6) throws EntityNotFoundException {
        LOGGER.debug("Updating Table6 with information: {}", table6);
        this.wmGenericDao.update(table6);

        Table1Id table6Id = new Table1Id();
        table6Id.setId(table6.getId());
        table6Id.setCol3(table6.getCol3());

        return this.wmGenericDao.findById(table6Id);
    }

    @Transactional(value = "TestingDb123TransactionManager")
	@Override
	public Table6 delete(Table1Id table6Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table6 with id: {}", table6Id);
        Table6 deleted = this.wmGenericDao.findById(table6Id);
        if (deleted == null) {
            LOGGER.debug("No Table6 found with id: {}", table6Id);
            throw new EntityNotFoundException(String.valueOf(table6Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Page<Table6> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table6s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Page<Table6> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table6s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDb123 for table Table6 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table6> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

