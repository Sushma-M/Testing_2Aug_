/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.testingdb123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.testingdb123.Table55;

/**
 * ServiceImpl object for domain model class Table55.
 *
 * @see Table55
 */
@Service("TestingDb123.Table55Service")
public class Table55ServiceImpl implements Table55Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table55ServiceImpl.class);

    @Autowired
    @Qualifier("TestingDb123.Table55Dao")
    private WMGenericDao<Table55, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table55, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDb123TransactionManager")
    @Override
	public Table55 create(Table55 table55) {
        LOGGER.debug("Creating a new Table55 with information: {}", table55);
        return this.wmGenericDao.create(table55);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Table55 getById(Long table55Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table55 by id: {}", table55Id);
        Table55 table55 = this.wmGenericDao.findById(table55Id);
        if (table55 == null){
            LOGGER.debug("No Table55 found with id: {}", table55Id);
            throw new EntityNotFoundException(String.valueOf(table55Id));
        }
        return table55;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDb123TransactionManager")
	@Override
	public Table55 update(Table55 table55) throws EntityNotFoundException {
        LOGGER.debug("Updating Table55 with information: {}", table55);
        this.wmGenericDao.update(table55);

        Long table55Id = table55.getColumn2();

        return this.wmGenericDao.findById(table55Id);
    }

    @Transactional(value = "TestingDb123TransactionManager")
	@Override
	public Table55 delete(Long table55Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table55 with id: {}", table55Id);
        Table55 deleted = this.wmGenericDao.findById(table55Id);
        if (deleted == null) {
            LOGGER.debug("No Table55 found with id: {}", table55Id);
            throw new EntityNotFoundException(String.valueOf(table55Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public Page<Table55> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table55s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Page<Table55> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table55s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDb123 for table Table55 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestingDb123TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDb123TransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table55> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

