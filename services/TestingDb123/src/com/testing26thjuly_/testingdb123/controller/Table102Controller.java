/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.testingdb123.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.testingdb123.Table102;
import com.testing26thjuly_.testingdb123.service.Table102Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table102.
 * @see Table102
 */
@RestController("TestingDb123.Table102Controller")
@RequestMapping("/TestingDb123/Table102")
@Api(description = "Exposes APIs to work with Table102 resource.", value = "Table102Controller")
public class Table102Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table102Controller.class);

    @Autowired
    @Qualifier("TestingDb123.Table102Service")
    private Table102Service table102Service;

    /**
     * @deprecated Use {@link #findTable102s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table102 instances matching the search criteria.")
    public Page<Table102> findTable102s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table102s list");
        return table102Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table102 instances matching the search criteria.")
    public Page<Table102> findTable102s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table102s list");
        return table102Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable102s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table102Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table102Service instance
	 */
    protected void setTable102Service(Table102Service service) {
        this.table102Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table102 instance.")
    public Table102 createTable102(@RequestBody Table102 table102) {
        LOGGER.debug("Create Table102 with information: {}", table102);
        table102 = table102Service.create(table102);
        LOGGER.debug("Created Table102 with information: {}", table102);
        return table102;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table102 instances.")
    public Long countTable102s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table102s");
        return table102Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table102 instance associated with the given id.")
    public Table102 getTable102(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table102 with id: {}", id);
        Table102 foundTable102 = table102Service.getById(id);
        LOGGER.debug("Table102 details with id: {}", foundTable102);
        return foundTable102;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table102 instance associated with the given id.")
    public Table102 editTable102(@PathVariable(value = "id") Integer id, @RequestBody Table102 table102) throws EntityNotFoundException {
        LOGGER.debug("Editing Table102 with id: {}", table102.getId());
        table102.setId(id);
        table102 = table102Service.update(table102);
        LOGGER.debug("Table102 details with id: {}", table102);
        return table102;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table102 instance associated with the given id.")
    public boolean deleteTable102(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table102 with id: {}", id);
        Table102 deletedTable102 = table102Service.delete(id);
        return deletedTable102 != null;
    }
}
