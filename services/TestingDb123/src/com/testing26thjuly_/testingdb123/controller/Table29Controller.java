/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.testingdb123.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.testingdb123.Table29;
import com.testing26thjuly_.testingdb123.service.Table29Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table29.
 * @see Table29
 */
@RestController("TestingDb123.Table29Controller")
@RequestMapping("/TestingDb123/Table29")
@Api(description = "Exposes APIs to work with Table29 resource.", value = "Table29Controller")
public class Table29Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table29Controller.class);

    @Autowired
    @Qualifier("TestingDb123.Table29Service")
    private Table29Service table29Service;

    /**
     * @deprecated Use {@link #findTable29s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table29 instances matching the search criteria.")
    public Page<Table29> findTable29s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table29s list");
        return table29Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table29 instances matching the search criteria.")
    public Page<Table29> findTable29s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table29s list");
        return table29Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable29s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table29Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table29Service instance
	 */
    protected void setTable29Service(Table29Service service) {
        this.table29Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table29 instance.")
    public Table29 createTable29(@RequestBody Table29 table29) {
        LOGGER.debug("Create Table29 with information: {}", table29);
        table29 = table29Service.create(table29);
        LOGGER.debug("Created Table29 with information: {}", table29);
        return table29;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table29 instances.")
    public Long countTable29s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table29s");
        return table29Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table29 instance associated with the given id.")
    public Table29 getTable29(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table29 with id: {}", id);
        Table29 foundTable29 = table29Service.getById(id);
        LOGGER.debug("Table29 details with id: {}", foundTable29);
        return foundTable29;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table29 instance associated with the given id.")
    public Table29 editTable29(@PathVariable(value = "id") String id, @RequestBody Table29 table29) throws EntityNotFoundException {
        LOGGER.debug("Editing Table29 with id: {}", table29.getColumn2());
        table29.setColumn2(id);
        table29 = table29Service.update(table29);
        LOGGER.debug("Table29 details with id: {}", table29);
        return table29;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table29 instance associated with the given id.")
    public boolean deleteTable29(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table29 with id: {}", id);
        Table29 deletedTable29 = table29Service.delete(id);
        return deletedTable29 != null;
    }
}
