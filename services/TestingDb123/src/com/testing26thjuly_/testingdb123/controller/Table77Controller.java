/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.testingdb123.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.testingdb123.Table77;
import com.testing26thjuly_.testingdb123.service.Table77Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table77.
 * @see Table77
 */
@RestController("TestingDb123.Table77Controller")
@RequestMapping("/TestingDb123/Table77")
@Api(description = "Exposes APIs to work with Table77 resource.", value = "Table77Controller")
public class Table77Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table77Controller.class);

    @Autowired
    @Qualifier("TestingDb123.Table77Service")
    private Table77Service table77Service;

    /**
     * @deprecated Use {@link #findTable77s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table77 instances matching the search criteria.")
    public Page<Table77> findTable77s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table77s list");
        return table77Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table77 instances matching the search criteria.")
    public Page<Table77> findTable77s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table77s list");
        return table77Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable77s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table77Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table77Service instance
	 */
    protected void setTable77Service(Table77Service service) {
        this.table77Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table77 instance.")
    public Table77 createTable77(@RequestBody Table77 table77) {
        LOGGER.debug("Create Table77 with information: {}", table77);
        table77 = table77Service.create(table77);
        LOGGER.debug("Created Table77 with information: {}", table77);
        return table77;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table77 instances.")
    public Long countTable77s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table77s");
        return table77Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table77 instance associated with the given id.")
    public Table77 getTable77(@PathVariable(value = "id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table77 with id: {}", id);
        Table77 foundTable77 = table77Service.getById(id);
        LOGGER.debug("Table77 details with id: {}", foundTable77);
        return foundTable77;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table77 instance associated with the given id.")
    public Table77 editTable77(@PathVariable(value = "id") Long id, @RequestBody Table77 table77) throws EntityNotFoundException {
        LOGGER.debug("Editing Table77 with id: {}", table77.getId());
        table77.setId(id);
        table77 = table77Service.update(table77);
        LOGGER.debug("Table77 details with id: {}", table77);
        return table77;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table77 instance associated with the given id.")
    public boolean deleteTable77(@PathVariable(value = "id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table77 with id: {}", id);
        Table77 deletedTable77 = table77Service.delete(id);
        return deletedTable77 != null;
    }
}
