/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.testingdb123.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.testingdb123.Table55;
import com.testing26thjuly_.testingdb123.service.Table55Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table55.
 * @see Table55
 */
@RestController("TestingDb123.Table55Controller")
@RequestMapping("/TestingDb123/Table55")
@Api(description = "Exposes APIs to work with Table55 resource.", value = "Table55Controller")
public class Table55Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table55Controller.class);

    @Autowired
    @Qualifier("TestingDb123.Table55Service")
    private Table55Service table55Service;

    /**
     * @deprecated Use {@link #findTable55s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table55 instances matching the search criteria.")
    public Page<Table55> findTable55s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table55s list");
        return table55Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table55 instances matching the search criteria.")
    public Page<Table55> findTable55s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table55s list");
        return table55Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable55s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table55Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table55Service instance
	 */
    protected void setTable55Service(Table55Service service) {
        this.table55Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table55 instance.")
    public Table55 createTable55(@RequestBody Table55 table55) {
        LOGGER.debug("Create Table55 with information: {}", table55);
        table55 = table55Service.create(table55);
        LOGGER.debug("Created Table55 with information: {}", table55);
        return table55;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table55 instances.")
    public Long countTable55s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table55s");
        return table55Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table55 instance associated with the given id.")
    public Table55 getTable55(@PathVariable(value = "id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table55 with id: {}", id);
        Table55 foundTable55 = table55Service.getById(id);
        LOGGER.debug("Table55 details with id: {}", foundTable55);
        return foundTable55;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table55 instance associated with the given id.")
    public Table55 editTable55(@PathVariable(value = "id") Long id, @RequestBody Table55 table55) throws EntityNotFoundException {
        LOGGER.debug("Editing Table55 with id: {}", table55.getColumn2());
        table55.setColumn2(id);
        table55 = table55Service.update(table55);
        LOGGER.debug("Table55 details with id: {}", table55);
        return table55;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table55 instance associated with the given id.")
    public boolean deleteTable55(@PathVariable(value = "id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table55 with id: {}", id);
        Table55 deletedTable55 = table55Service.delete(id);
        return deletedTable55 != null;
    }
}
