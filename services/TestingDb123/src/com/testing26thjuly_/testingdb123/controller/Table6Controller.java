/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.testingdb123.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.testingdb123.Table1Id;
import com.testing26thjuly_.testingdb123.Table6;
import com.testing26thjuly_.testingdb123.service.Table6Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table6.
 * @see Table6
 */
@RestController("TestingDb123.Table6Controller")
@RequestMapping("/TestingDb123/Table6")
@Api(description = "Exposes APIs to work with Table6 resource.", value = "Table6Controller")
public class Table6Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table6Controller.class);

    @Autowired
    @Qualifier("TestingDb123.Table6Service")
    private Table6Service table6Service;

    /**
     * @deprecated Use {@link #findTable6s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table6 instances matching the search criteria.")
    public Page<Table6> findTable6s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table6s list");
        return table6Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table6 instances matching the search criteria.")
    public Page<Table6> findTable6s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table6s list");
        return table6Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable6s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table6Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table6Service instance
	 */
    protected void setTable6Service(Table6Service service) {
        this.table6Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table6 instance.")
    public Table6 createTable6(@RequestBody Table6 table6) {
        LOGGER.debug("Create Table6 with information: {}", table6);
        table6 = table6Service.create(table6);
        LOGGER.debug("Created Table6 with information: {}", table6);
        return table6;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table6 instance associated with the given composite-id.")
    public Table6 getTable6(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "col3", required = true) String col3) throws EntityNotFoundException {
        Table1Id table6Id = new Table1Id();
        table6Id.setId(id);
        table6Id.setCol3(col3);
        LOGGER.debug("Getting Table6 with id: {}", table6Id);
        Table6 table6 = table6Service.getById(table6Id);
        LOGGER.debug("Table6 details with id: {}", table6);
        return table6;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table6 instance associated with the given composite-id.")
    public Table6 editTable6(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "col3", required = true) String col3, @RequestBody Table6 table6) throws EntityNotFoundException {
        Table1Id table6Id = new Table1Id();
        table6Id.setId(id);
        table6Id.setCol3(col3);
        table6Service.delete(table6Id);
        table6 = table6Service.create(table6);
        LOGGER.debug("Table6 details with id is updated: {}", table6);
        return table6;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table6 instance associated with the given composite-id.")
    public boolean deleteTable6(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "col3", required = true) String col3) throws EntityNotFoundException {
        Table1Id table6Id = new Table1Id();
        table6Id.setId(id);
        table6Id.setCol3(col3);
        LOGGER.debug("Deleting Table6 with id: {}", table6Id);
        Table6 table6 = table6Service.delete(table6Id);
        return table6 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table6 instances.")
    public Long countTable6s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table6s");
        return table6Service.count(query);
    }
}
