/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table19;
import com.testing26thjuly_.demo.Table9;
import com.testing26thjuly_.demo.service.Table19Service;
import com.testing26thjuly_.demo.service.Table9Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table19.
 * @see Table19
 */
@RestController("Demo.Table19Controller")
@RequestMapping("/Demo/Table19")
@Api(description = "Exposes APIs to work with Table19 resource.", value = "Table19Controller")
public class Table19Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table19Controller.class);

    @Autowired
    @Qualifier("Demo.Table19Service")
    private Table19Service table19Service;

    @Autowired
    @Qualifier("Demo.Table9Service")
    private Table9Service table9Service;

    /**
     * @deprecated Use {@link #findTable19s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table19 instances matching the search criteria.")
    public Page<Table19> findTable19s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table19s list");
        return table19Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table19 instances matching the search criteria.")
    public Page<Table19> findTable19s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table19s list");
        return table19Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable19s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table19Service.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/table9s", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the table9s instance associated with the given id.")
    public Page<Table9> findAssociatedTable9s(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated table9s");
        return table9Service.findAssociatedValues(id, "table19", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table19Service instance
	 */
    protected void setTable19Service(Table19Service service) {
        this.table19Service = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table9Service instance
	 */
    protected void setTable9Service(Table9Service service) {
        this.table9Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table19 instance.")
    public Table19 createTable19(@RequestBody Table19 table19) {
        LOGGER.debug("Create Table19 with information: {}", table19);
        table19 = table19Service.create(table19);
        LOGGER.debug("Created Table19 with information: {}", table19);
        return table19;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table19 instances.")
    public Long countTable19s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table19s");
        return table19Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table19 instance associated with the given id.")
    public Table19 getTable19(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table19 with id: {}", id);
        Table19 foundTable19 = table19Service.getById(id);
        LOGGER.debug("Table19 details with id: {}", foundTable19);
        return foundTable19;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table19 instance associated with the given id.")
    public Table19 editTable19(@PathVariable(value = "id") Integer id, @RequestBody Table19 table19) throws EntityNotFoundException {
        LOGGER.debug("Editing Table19 with id: {}", table19.getId());
        table19.setId(id);
        table19 = table19Service.update(table19);
        LOGGER.debug("Table19 details with id: {}", table19);
        return table19;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table19 instance associated with the given id.")
    public boolean deleteTable19(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table19 with id: {}", id);
        Table19 deletedTable19 = table19Service.delete(id);
        return deletedTable19 != null;
    }
}
