/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table18;
import com.testing26thjuly_.demo.Table18Id;
import com.testing26thjuly_.demo.Table42;
import com.testing26thjuly_.demo.service.Table18Service;
import com.testing26thjuly_.demo.service.Table42Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table18.
 * @see Table18
 */
@RestController("Demo.Table18Controller")
@RequestMapping("/Demo/Table18")
@Api(description = "Exposes APIs to work with Table18 resource.", value = "Table18Controller")
public class Table18Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table18Controller.class);

    @Autowired
    @Qualifier("Demo.Table18Service")
    private Table18Service table18Service;

    @Autowired
    @Qualifier("Demo.Table42Service")
    private Table42Service table42Service;

    /**
     * @deprecated Use {@link #findTable18s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table18 instances matching the search criteria.")
    public Page<Table18> findTable18s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table18s list");
        return table18Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table18 instances matching the search criteria.")
    public Page<Table18> findTable18s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table18s list");
        return table18Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable18s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table18Service.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/table42s", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the table42s instance associated with the given id.")
    public Page<Table42> findAssociatedTable42s(Pageable pageable, @PathVariable("id") Table18Id id) {
        LOGGER.debug("Fetching all associated table42s");
        return table42Service.findAssociatedValues(id, "table18", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table18Service instance
	 */
    protected void setTable18Service(Table18Service service) {
        this.table18Service = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table42Service instance
	 */
    protected void setTable42Service(Table42Service service) {
        this.table42Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table18 instance.")
    public Table18 createTable18(@RequestBody Table18 table18) {
        LOGGER.debug("Create Table18 with information: {}", table18);
        table18 = table18Service.create(table18);
        LOGGER.debug("Created Table18 with information: {}", table18);
        return table18;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table18 instance associated with the given composite-id.")
    public Table18 getTable18(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3) throws EntityNotFoundException {
        Table18Id table18Id = new Table18Id();
        table18Id.setId(id);
        table18Id.setColumn2(column2);
        table18Id.setColumn3(column3);
        LOGGER.debug("Getting Table18 with id: {}", table18Id);
        Table18 table18 = table18Service.getById(table18Id);
        LOGGER.debug("Table18 details with id: {}", table18);
        return table18;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table18 instance associated with the given composite-id.")
    public Table18 editTable18(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3, @RequestBody Table18 table18) throws EntityNotFoundException {
        Table18Id table18Id = new Table18Id();
        table18Id.setId(id);
        table18Id.setColumn2(column2);
        table18Id.setColumn3(column3);
        table18Service.delete(table18Id);
        table18 = table18Service.create(table18);
        LOGGER.debug("Table18 details with id is updated: {}", table18);
        return table18;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table18 instance associated with the given composite-id.")
    public boolean deleteTable18(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3) throws EntityNotFoundException {
        Table18Id table18Id = new Table18Id();
        table18Id.setId(id);
        table18Id.setColumn2(column2);
        table18Id.setColumn3(column3);
        LOGGER.debug("Deleting Table18 with id: {}", table18Id);
        Table18 table18 = table18Service.delete(table18Id);
        return table18 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table18 instances.")
    public Long countTable18s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table18s");
        return table18Service.count(query);
    }
}
