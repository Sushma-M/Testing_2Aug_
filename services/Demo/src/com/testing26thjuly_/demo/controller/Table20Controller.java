/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table20;
import com.testing26thjuly_.demo.Table9;
import com.testing26thjuly_.demo.service.Table20Service;
import com.testing26thjuly_.demo.service.Table9Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table20.
 * @see Table20
 */
@RestController("Demo.Table20Controller")
@RequestMapping("/Demo/Table20")
@Api(description = "Exposes APIs to work with Table20 resource.", value = "Table20Controller")
public class Table20Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table20Controller.class);

    @Autowired
    @Qualifier("Demo.Table20Service")
    private Table20Service table20Service;

    @Autowired
    @Qualifier("Demo.Table9Service")
    private Table9Service table9Service;

    /**
     * @deprecated Use {@link #findTable20s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table20 instances matching the search criteria.")
    public Page<Table20> findTable20s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table20s list");
        return table20Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table20 instances matching the search criteria.")
    public Page<Table20> findTable20s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table20s list");
        return table20Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable20s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table20Service.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/table9s", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the table9s instance associated with the given id.")
    public Page<Table9> findAssociatedTable9s(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated table9s");
        return table9Service.findAssociatedValues(id, "table20", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table20Service instance
	 */
    protected void setTable20Service(Table20Service service) {
        this.table20Service = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table9Service instance
	 */
    protected void setTable9Service(Table9Service service) {
        this.table9Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table20 instance.")
    public Table20 createTable20(@RequestBody Table20 table20) {
        LOGGER.debug("Create Table20 with information: {}", table20);
        table20 = table20Service.create(table20);
        LOGGER.debug("Created Table20 with information: {}", table20);
        return table20;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table20 instances.")
    public Long countTable20s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table20s");
        return table20Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table20 instance associated with the given id.")
    public Table20 getTable20(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table20 with id: {}", id);
        Table20 foundTable20 = table20Service.getById(id);
        LOGGER.debug("Table20 details with id: {}", foundTable20);
        return foundTable20;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table20 instance associated with the given id.")
    public Table20 editTable20(@PathVariable(value = "id") String id, @RequestBody Table20 table20) throws EntityNotFoundException {
        LOGGER.debug("Editing Table20 with id: {}", table20.getId());
        table20.setId(id);
        table20 = table20Service.update(table20);
        LOGGER.debug("Table20 details with id: {}", table20);
        return table20;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table20 instance associated with the given id.")
    public boolean deleteTable20(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table20 with id: {}", id);
        Table20 deletedTable20 = table20Service.delete(id);
        return deletedTable20 != null;
    }
}
