/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table1;
import com.testing26thjuly_.demo.Table8;
import com.testing26thjuly_.demo.service.Table1Service;
import com.testing26thjuly_.demo.service.Table8Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table1.
 * @see Table1
 */
@RestController("Demo.Table1Controller")
@RequestMapping("/Demo/Table1")
@Api(description = "Exposes APIs to work with Table1 resource.", value = "Table1Controller")
public class Table1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table1Controller.class);

    @Autowired
    @Qualifier("Demo.Table1Service")
    private Table1Service table1Service;

    @Autowired
    @Qualifier("Demo.Table8Service")
    private Table8Service table8Service;

    /**
     * @deprecated Use {@link #findTable1s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table1 instances matching the search criteria.")
    public Page<Table1> findTable1s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table1s list");
        return table1Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table1 instances matching the search criteria.")
    public Page<Table1> findTable1s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table1s list");
        return table1Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable1s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table1Service.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/table8s", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the table8s instance associated with the given id.")
    public Page<Table8> findAssociatedTable8s(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated table8s");
        return table8Service.findAssociatedValues(id, "table1", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table1Service instance
	 */
    protected void setTable1Service(Table1Service service) {
        this.table1Service = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table8Service instance
	 */
    protected void setTable8Service(Table8Service service) {
        this.table8Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table1 instance.")
    public Table1 createTable1(@RequestBody Table1 table1) {
        LOGGER.debug("Create Table1 with information: {}", table1);
        table1 = table1Service.create(table1);
        LOGGER.debug("Created Table1 with information: {}", table1);
        return table1;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table1 instances.")
    public Long countTable1s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table1s");
        return table1Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table1 instance associated with the given id.")
    public Table1 getTable1(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table1 with id: {}", id);
        Table1 foundTable1 = table1Service.getById(id);
        LOGGER.debug("Table1 details with id: {}", foundTable1);
        return foundTable1;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table1 instance associated with the given id.")
    public Table1 editTable1(@PathVariable(value = "id") Integer id, @RequestBody Table1 table1) throws EntityNotFoundException {
        LOGGER.debug("Editing Table1 with id: {}", table1.getId());
        table1.setId(id);
        table1 = table1Service.update(table1);
        LOGGER.debug("Table1 details with id: {}", table1);
        return table1;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table1 instance associated with the given id.")
    public boolean deleteTable1(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table1 with id: {}", id);
        Table1 deletedTable1 = table1Service.delete(id);
        return deletedTable1 != null;
    }
}
