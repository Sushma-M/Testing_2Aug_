/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table14;
import com.testing26thjuly_.demo.Table14Id;
import com.testing26thjuly_.demo.service.Table14Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table14.
 * @see Table14
 */
@RestController("Demo.Table14Controller")
@RequestMapping("/Demo/Table14")
@Api(description = "Exposes APIs to work with Table14 resource.", value = "Table14Controller")
public class Table14Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table14Controller.class);

    @Autowired
    @Qualifier("Demo.Table14Service")
    private Table14Service table14Service;

    /**
     * @deprecated Use {@link #findTable14s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table14 instances matching the search criteria.")
    public Page<Table14> findTable14s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table14s list");
        return table14Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table14 instances matching the search criteria.")
    public Page<Table14> findTable14s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table14s list");
        return table14Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable14s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table14Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table14Service instance
	 */
    protected void setTable14Service(Table14Service service) {
        this.table14Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table14 instance.")
    public Table14 createTable14(@RequestBody Table14 table14) {
        LOGGER.debug("Create Table14 with information: {}", table14);
        table14 = table14Service.create(table14);
        LOGGER.debug("Created Table14 with information: {}", table14);
        return table14;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table14 instance associated with the given composite-id.")
    public Table14 getTable14(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3) throws EntityNotFoundException {
        Table14Id table14Id = new Table14Id();
        table14Id.setId(id);
        table14Id.setColumn2(column2);
        table14Id.setColumn3(column3);
        LOGGER.debug("Getting Table14 with id: {}", table14Id);
        Table14 table14 = table14Service.getById(table14Id);
        LOGGER.debug("Table14 details with id: {}", table14);
        return table14;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table14 instance associated with the given composite-id.")
    public Table14 editTable14(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3, @RequestBody Table14 table14) throws EntityNotFoundException {
        Table14Id table14Id = new Table14Id();
        table14Id.setId(id);
        table14Id.setColumn2(column2);
        table14Id.setColumn3(column3);
        table14Service.delete(table14Id);
        table14 = table14Service.create(table14);
        LOGGER.debug("Table14 details with id is updated: {}", table14);
        return table14;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table14 instance associated with the given composite-id.")
    public boolean deleteTable14(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3) throws EntityNotFoundException {
        Table14Id table14Id = new Table14Id();
        table14Id.setId(id);
        table14Id.setColumn2(column2);
        table14Id.setColumn3(column3);
        LOGGER.debug("Deleting Table14 with id: {}", table14Id);
        Table14 table14 = table14Service.delete(table14Id);
        return table14 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table14 instances.")
    public Long countTable14s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table14s");
        return table14Service.count(query);
    }
}
