/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.Table42;
import com.testing26thjuly_.demo.Table42Id;
import com.testing26thjuly_.demo.service.Table42Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table42.
 * @see Table42
 */
@RestController("Demo.Table42Controller")
@RequestMapping("/Demo/Table42")
@Api(description = "Exposes APIs to work with Table42 resource.", value = "Table42Controller")
public class Table42Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table42Controller.class);

    @Autowired
    @Qualifier("Demo.Table42Service")
    private Table42Service table42Service;

    /**
     * @deprecated Use {@link #findTable42s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table42 instances matching the search criteria.")
    public Page<Table42> findTable42s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table42s list");
        return table42Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table42 instances matching the search criteria.")
    public Page<Table42> findTable42s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table42s list");
        return table42Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable42s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table42Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table42Service instance
	 */
    protected void setTable42Service(Table42Service service) {
        this.table42Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table42 instance.")
    public Table42 createTable42(@RequestBody Table42 table42) {
        LOGGER.debug("Create Table42 with information: {}", table42);
        table42 = table42Service.create(table42);
        LOGGER.debug("Created Table42 with information: {}", table42);
        return table42;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table42 instance associated with the given composite-id.")
    public Table42 getTable42(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3, @RequestParam(value = "column4", required = true) String column4, @RequestParam(value = "column5", required = true) String column5) throws EntityNotFoundException {
        Table42Id table42Id = new Table42Id();
        table42Id.setId(id);
        table42Id.setColumn2(column2);
        table42Id.setColumn3(column3);
        table42Id.setColumn4(column4);
        table42Id.setColumn5(column5);
        LOGGER.debug("Getting Table42 with id: {}", table42Id);
        Table42 table42 = table42Service.getById(table42Id);
        LOGGER.debug("Table42 details with id: {}", table42);
        return table42;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table42 instance associated with the given composite-id.")
    public Table42 editTable42(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3, @RequestParam(value = "column4", required = true) String column4, @RequestParam(value = "column5", required = true) String column5, @RequestBody Table42 table42) throws EntityNotFoundException {
        Table42Id table42Id = new Table42Id();
        table42Id.setId(id);
        table42Id.setColumn2(column2);
        table42Id.setColumn3(column3);
        table42Id.setColumn4(column4);
        table42Id.setColumn5(column5);
        table42Service.delete(table42Id);
        table42 = table42Service.create(table42);
        LOGGER.debug("Table42 details with id is updated: {}", table42);
        return table42;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table42 instance associated with the given composite-id.")
    public boolean deleteTable42(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) String column2, @RequestParam(value = "column3", required = true) String column3, @RequestParam(value = "column4", required = true) String column4, @RequestParam(value = "column5", required = true) String column5) throws EntityNotFoundException {
        Table42Id table42Id = new Table42Id();
        table42Id.setId(id);
        table42Id.setColumn2(column2);
        table42Id.setColumn3(column3);
        table42Id.setColumn4(column4);
        table42Id.setColumn5(column5);
        LOGGER.debug("Deleting Table42 with id: {}", table42Id);
        Table42 table42 = table42Service.delete(table42Id);
        return table42 != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table42 instances.")
    public Long countTable42s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table42s");
        return table42Service.count(query);
    }
}
