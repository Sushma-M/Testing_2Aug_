/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing26thjuly_.demo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testing26thjuly_.demo.ViewTable1;
import com.testing26thjuly_.demo.ViewTable1Id;
import com.testing26thjuly_.demo.service.ViewTable1Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ViewTable1.
 * @see ViewTable1
 */
@RestController("Demo.ViewTable1Controller")
@RequestMapping("/Demo/ViewTable1")
@Api(description = "Exposes APIs to work with ViewTable1 resource.", value = "ViewTable1Controller")
public class ViewTable1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewTable1Controller.class);

    @Autowired
    @Qualifier("Demo.ViewTable1Service")
    private ViewTable1Service viewTable1Service;

    /**
     * @deprecated Use {@link #findViewTable1s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ViewTable1 instances matching the search criteria.")
    public Page<ViewTable1> findViewTable1s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ViewTable1s list");
        return viewTable1Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ViewTable1 instances matching the search criteria.")
    public Page<ViewTable1> findViewTable1s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewTable1s list");
        return viewTable1Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportViewTable1s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return viewTable1Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViewTable1Service instance
	 */
    protected void setViewTable1Service(ViewTable1Service service) {
        this.viewTable1Service = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ViewTable1 instance associated with the given composite-id.")
    public ViewTable1 getViewTable1(@RequestParam(value = "id", required = true) int id, @RequestParam(value = "column2", required = true) Byte column2, @RequestParam(value = "column3", required = true) String column3) throws EntityNotFoundException {
        ViewTable1Id viewtable1Id = new ViewTable1Id();
        viewtable1Id.setId(id);
        viewtable1Id.setColumn2(column2);
        viewtable1Id.setColumn3(column3);
        LOGGER.debug("Getting ViewTable1 with id: {}", viewtable1Id);
        ViewTable1 viewtable1 = viewTable1Service.getById(viewtable1Id);
        LOGGER.debug("ViewTable1 details with id: {}", viewtable1);
        return viewtable1;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ViewTable1 instances.")
    public Long countViewTable1s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ViewTable1s");
        return viewTable1Service.count(query);
    }
}
