/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.demo.Table42;
import com.testing26thjuly_.demo.Table42Id;

/**
 * ServiceImpl object for domain model class Table42.
 *
 * @see Table42
 */
@Service("Demo.Table42Service")
public class Table42ServiceImpl implements Table42Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table42ServiceImpl.class);

    @Autowired
    @Qualifier("Demo.Table42Dao")
    private WMGenericDao<Table42, Table42Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table42, Table42Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DemoTransactionManager")
    @Override
	public Table42 create(Table42 table42) {
        LOGGER.debug("Creating a new Table42 with information: {}", table42);
        return this.wmGenericDao.create(table42);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Table42 getById(Table42Id table42Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table42 by id: {}", table42Id);
        Table42 table42 = this.wmGenericDao.findById(table42Id);
        if (table42 == null){
            LOGGER.debug("No Table42 found with id: {}", table42Id);
            throw new EntityNotFoundException(String.valueOf(table42Id));
        }
        return table42;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DemoTransactionManager")
	@Override
	public Table42 update(Table42 table42) throws EntityNotFoundException {
        LOGGER.debug("Updating Table42 with information: {}", table42);
        this.wmGenericDao.update(table42);

        Table42Id table42Id = new Table42Id();
        table42Id.setId(table42.getId());
        table42Id.setColumn2(table42.getColumn2());
        table42Id.setColumn3(table42.getColumn3());
        table42Id.setColumn4(table42.getColumn4());
        table42Id.setColumn5(table42.getColumn5());

        return this.wmGenericDao.findById(table42Id);
    }

    @Transactional(value = "DemoTransactionManager")
	@Override
	public Table42 delete(Table42Id table42Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table42 with id: {}", table42Id);
        Table42 deleted = this.wmGenericDao.findById(table42Id);
        if (deleted == null) {
            LOGGER.debug("No Table42 found with id: {}", table42Id);
            throw new EntityNotFoundException(String.valueOf(table42Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Page<Table42> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table42s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Page<Table42> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table42s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Demo for table Table42 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table42> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

