/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.demo.ViewTable1;
import com.testing26thjuly_.demo.ViewTable1Id;

/**
 * ServiceImpl object for domain model class ViewTable1.
 *
 * @see ViewTable1
 */
@Service("Demo.ViewTable1Service")
public class ViewTable1ServiceImpl implements ViewTable1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewTable1ServiceImpl.class);

    @Autowired
    @Qualifier("Demo.ViewTable1Dao")
    private WMGenericDao<ViewTable1, ViewTable1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewTable1, ViewTable1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public ViewTable1 getById(ViewTable1Id viewtable1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding ViewTable1 by id: {}", viewtable1Id);
        ViewTable1 viewtable1 = this.wmGenericDao.findById(viewtable1Id);
        if (viewtable1 == null){
            LOGGER.debug("No ViewTable1 found with id: {}", viewtable1Id);
            throw new EntityNotFoundException(String.valueOf(viewtable1Id));
        }
        return viewtable1;
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Page<ViewTable1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewTable1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Page<ViewTable1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewTable1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Demo for table ViewTable1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ViewTable1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

