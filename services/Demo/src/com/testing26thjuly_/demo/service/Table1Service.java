/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.demo.Table1;

/**
 * Service object for domain model class Table1.
 *
 * @see {@link Table1}
 */
public interface Table1Service {

    /**
     * Creates a new Table1.
     *
     * @param table1 The information of the created CompositeTable.
     * @return The created Table1.
     */
	Table1 create(Table1 table1);


	/**
	 * Finds Table1 by id.
	 *
	 * @param table1Id The id of the wanted Table1.
	 * @return The found Table1. If no Table1 is found, this method returns null.
	 */
	Table1 getById(Integer table1Id) throws EntityNotFoundException;

	/**
	 * Updates the information of a Table1.
	 *
	 * @param table1 The information of the updated Table1.
	 * @return The updated Table1.
     *
	 * @throws EntityNotFoundException if no Table1 is found with given id.
	 */
	Table1 update(Table1 table1) throws EntityNotFoundException;

    /**
	 * Deletes a Table1.
	 *
	 * @param table1Id The id of the deleted Table1.
	 * @return The deleted Table1.
     *
	 * @throws EntityNotFoundException if no Table1 is found with the given id.
	 */
	Table1 delete(Integer table1Id) throws EntityNotFoundException;

	/**
	 * Finds all Table1s.
	 *
	 * @return A list of Table1s.
	 */
    @Deprecated
	Page<Table1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Table1s.
	 * @return A list of Table1s.
	 */
    Page<Table1> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table1s in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Table1.
	 */
	long count(String query);

    Page<Table1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

