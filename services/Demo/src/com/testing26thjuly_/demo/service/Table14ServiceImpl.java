/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.demo.Table14;
import com.testing26thjuly_.demo.Table14Id;

/**
 * ServiceImpl object for domain model class Table14.
 *
 * @see Table14
 */
@Service("Demo.Table14Service")
public class Table14ServiceImpl implements Table14Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table14ServiceImpl.class);

    @Autowired
    @Qualifier("Demo.Table14Dao")
    private WMGenericDao<Table14, Table14Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table14, Table14Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DemoTransactionManager")
    @Override
	public Table14 create(Table14 table14) {
        LOGGER.debug("Creating a new Table14 with information: {}", table14);
        return this.wmGenericDao.create(table14);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Table14 getById(Table14Id table14Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table14 by id: {}", table14Id);
        Table14 table14 = this.wmGenericDao.findById(table14Id);
        if (table14 == null){
            LOGGER.debug("No Table14 found with id: {}", table14Id);
            throw new EntityNotFoundException(String.valueOf(table14Id));
        }
        return table14;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DemoTransactionManager")
	@Override
	public Table14 update(Table14 table14) throws EntityNotFoundException {
        LOGGER.debug("Updating Table14 with information: {}", table14);
        this.wmGenericDao.update(table14);

        Table14Id table14Id = new Table14Id();
        table14Id.setId(table14.getId());
        table14Id.setColumn2(table14.getColumn2());
        table14Id.setColumn3(table14.getColumn3());

        return this.wmGenericDao.findById(table14Id);
    }

    @Transactional(value = "DemoTransactionManager")
	@Override
	public Table14 delete(Table14Id table14Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table14 with id: {}", table14Id);
        Table14 deleted = this.wmGenericDao.findById(table14Id);
        if (deleted == null) {
            LOGGER.debug("No Table14 found with id: {}", table14Id);
            throw new EntityNotFoundException(String.valueOf(table14Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Page<Table14> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table14s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Page<Table14> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table14s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Demo for table Table14 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table14> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

