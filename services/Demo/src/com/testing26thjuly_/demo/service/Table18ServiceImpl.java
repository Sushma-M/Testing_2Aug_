/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing26thjuly_.demo.Table18;
import com.testing26thjuly_.demo.Table18Id;

/**
 * ServiceImpl object for domain model class Table18.
 *
 * @see Table18
 */
@Service("Demo.Table18Service")
public class Table18ServiceImpl implements Table18Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table18ServiceImpl.class);

    @Autowired
    @Qualifier("Demo.Table18Dao")
    private WMGenericDao<Table18, Table18Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table18, Table18Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DemoTransactionManager")
    @Override
	public Table18 create(Table18 table18) {
        LOGGER.debug("Creating a new Table18 with information: {}", table18);
        return this.wmGenericDao.create(table18);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Table18 getById(Table18Id table18Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table18 by id: {}", table18Id);
        Table18 table18 = this.wmGenericDao.findById(table18Id);
        if (table18 == null){
            LOGGER.debug("No Table18 found with id: {}", table18Id);
            throw new EntityNotFoundException(String.valueOf(table18Id));
        }
        return table18;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DemoTransactionManager")
	@Override
	public Table18 update(Table18 table18) throws EntityNotFoundException {
        LOGGER.debug("Updating Table18 with information: {}", table18);
        this.wmGenericDao.update(table18);

        Table18Id table18Id = new Table18Id();
        table18Id.setId(table18.getId());
        table18Id.setColumn2(table18.getColumn2());
        table18Id.setColumn3(table18.getColumn3());

        return this.wmGenericDao.findById(table18Id);
    }

    @Transactional(value = "DemoTransactionManager")
	@Override
	public Table18 delete(Table18Id table18Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table18 with id: {}", table18Id);
        Table18 deleted = this.wmGenericDao.findById(table18Id);
        if (deleted == null) {
            LOGGER.debug("No Table18 found with id: {}", table18Id);
            throw new EntityNotFoundException(String.valueOf(table18Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public Page<Table18> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table18s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Page<Table18> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table18s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Demo for table Table18 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DemoTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DemoTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Table18> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

