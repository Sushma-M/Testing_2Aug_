/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing26thjuly_.demo;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Table9 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`TABLE9`")
@IdClass(Table9Id.class)
public class Table9 implements Serializable {

    private int id;
    private String column2;
    private String column3;
    private Table19 table19;
    private Table20 table20;

    @Id
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Id
    @Column(name = "`COLUMN2`", nullable = false, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN3`", nullable = true, length = 255)
    public String getColumn3() {
        return this.column3;
    }

    public void setColumn3(String column3) {
        this.column3 = column3;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ID`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Table19 getTable19() {
        return this.table19;
    }

    public void setTable19(Table19 table19) {
        this.id = table19.getId();

        this.table19 = table19;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN2`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Table20 getTable20() {
        return this.table20;
    }

    public void setTable20(Table20 table20) {
        this.column2 = table20.getId();

        this.table20 = table20;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table9)) return false;
        final Table9 table9 = (Table9) o;
        return Objects.equals(getId(), table9.getId()) &&
                Objects.equals(getColumn2(), table9.getColumn2());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(),
                getColumn2());
    }
}

